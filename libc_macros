ag --group '#.*[a-zA-Z0-9]*.*\(.*\)(\\\n)*([a-zA-Z0-9].*\(.*\))*'

regex/COPYRIGHT
53: *	@(#)COPYRIGHT	8.1 (Berkeley) 3/16/94

regex/regcomp.c
34: *	@(#)regcomp.c	8.5 (Berkeley) 3/20/94
64:#	define	NPAREN	10	/* we need to remember () 1-9 for back refs */
114:#define	PEEK()	(*p->next)
115:#define	PEEK2()	(*(p->next+1))
116:#define	MORE()	(p->next < p->end)
117:#define	MORE2()	(p->next+1 < p->end)
118:#define	SEE(c)	(MORE() && PEEK() == (c))
119:#define	SEETWO(a, b)	(MORE() && MORE2() && PEEK() == (a) && PEEK2() == (b))
120:#define	EAT(c)	((SEE(c)) ? (NEXT(), 1) : 0)
121:#define	EATTWO(a, b)	((SEETWO(a, b)) ? (NEXT2(), 1) : 0)
122:#define	NEXT()	(p->next++)
123:#define	NEXT2()	(p->next += 2)
124:#define	NEXTn(n)	(p->next += (n))
125:#define	GETNEXT()	(*p->next++)
126:#define	SETERROR(e)	seterr(p, (e))
127:#define	REQUIRE(co, e)	(void) ((co) || SETERROR(e))
128:#define	EMIT(op, sopnd)	doemit(p, (sop)(op), (size_t)(sopnd))
129:#define	INSERT(op, pos)	doinsert(p, (sop)(op), HERE()-(pos)+1, pos)
130:#define	AHEAD(pos)		dofwd(p, pos, HERE()-(pos))
131:#define	ASTERN(sop, pos)	EMIT(sop, HERE()-pos)
132:#define	HERE()		(p->slen)
133:#define	THERE()		(p->slen - 1)
134:#define	THERETHERE()	(p->slen - 2)
135:#define	DROP(n)	(p->slen -= (n))
155:#	define	GOODFLAGS(f)	(f)
157:#	define	GOODFLAGS(f)	((f)&~REG_DUMP)
482:#	define	BACKSL	(1<<CHAR_BIT)
957:#	define	REP(f, t)	((f)*8 + (t))
958:#	define	MAP(n)	(((n) <= 1) ? (n) : ((n) == INFINITY) ? INF : N)

regex/regerror.c
34: *	@(#)regerror.c	8.4 (Berkeley) 3/20/94

regex/regfree.c
34: *	@(#)regfree.c	8.3 (Berkeley) 3/20/94

regex/regex.3
36:.\"	@(#)regex.3	8.4 (Berkeley) 3/20/94

regex/utils.h
35: *	@(#)utils.h	8.3 (Berkeley) 3/20/94
40:#define	INFINITY	(DUPMAX + 1)
41:#define	NC		(CHAR_MAX - CHAR_MIN + 1)
54:#define	memmove(d, s, c)	bcopy(s, d, c)

regex/re_format.7
36:.\"	@(#)re_format.7	8.3 (Berkeley) 3/20/94

regex/cname.h
35: *	@(#)cname.h	8.3 (Berkeley) 3/20/94

regex/Makefile.inc
2:#	@(#)Makefile.inc	8.1 (Berkeley) 6/4/93

regex/regex2.h
35: *	@(#)regex2.h	8.4 (Berkeley) 3/20/94
41:#define	MAGIC1	((('r'^0200)<<8) | 'e')
66:#define	OPSHIFT	((unsigned)27)
67:#define	OP(n)	((n)&OPRMASK)
68:#define	OPND(n)	((n)&OPDMASK)
69:#define	SOP(op, opnd)	((op)|(opnd))
72:#define	OEND	(1LU<<OPSHIFT)	/* endmarker	-			*/
73:#define	OCHAR	(2LU<<OPSHIFT)	/* character	unsigned char		*/
74:#define	OBOL	(3LU<<OPSHIFT)	/* left anchor	-			*/
75:#define	OEOL	(4LU<<OPSHIFT)	/* right anchor	-			*/
76:#define	OANY	(5LU<<OPSHIFT)	/* .		-			*/
77:#define	OANYOF	(6LU<<OPSHIFT)	/* [...]	set number		*/
78:#define	OBACK_	(7LU<<OPSHIFT)	/* begin \d	paren number		*/
79:#define	O_BACK	(8LU<<OPSHIFT)	/* end \d	paren number		*/
80:#define	OPLUS_	(9LU<<OPSHIFT)	/* + prefix	fwd to suffix		*/
81:#define	O_PLUS	(10LU<<OPSHIFT)	/* + suffix	back to prefix		*/
82:#define	OQUEST_	(11LU<<OPSHIFT)	/* ? prefix	fwd to suffix		*/
83:#define	O_QUEST	(12LU<<OPSHIFT)	/* ? suffix	back to prefix		*/
84:#define	OLPAREN	(13LU<<OPSHIFT)	/* (		fwd to )		*/
85:#define	ORPAREN	(14LU<<OPSHIFT)	/* )		back to (		*/
86:#define	OCH_	(15LU<<OPSHIFT)	/* begin choice	fwd to OOR2		*/
87:#define	OOR1	(16LU<<OPSHIFT)	/* | pt. 1	back to OOR1 or OCH_	*/
88:#define	OOR2	(17LU<<OPSHIFT)	/* | pt. 2	fwd to OOR2 or O_CH	*/
89:#define	O_CH	(18LU<<OPSHIFT)	/* end choice	back to OOR1		*/
90:#define	OBOW	(19LU<<OPSHIFT)	/* begin word	-			*/
91:#define	OEOW	(20LU<<OPSHIFT)	/* end word	-			*/
113:#define	CHadd(cs, c)	((cs)->ptr[(uch)(c)] |= (cs)->mask, (cs)->hash += (c))
114:#define	CHsub(cs, c)	((cs)->ptr[(uch)(c)] &= ~(cs)->mask, (cs)->hash -= (c))
115:#define	CHIN(cs, c)	((cs)->ptr[(uch)(c)] & (cs)->mask)
116:#define	MCadd(p, cs, cp)	mcadd(p, cs, cp)	/* regcomp() internal fns */
117:#define	MCsub(p, cs, cp)	mcsub(p, cs, cp)
118:#define	MCin(p, cs, cp)	mcin(p, cs, cp)
128:#		define	MAGIC2	((('R'^0200)<<8)|'E')
156:#define	OUT	(CHAR_MAX+1)	/* a non-character value */
157:#define	ISWORD(c)	(isalnum(c) || (c) == '_')

regex/cclass.h
35: *	@(#)cclass.h	8.3 (Berkeley) 3/20/94
53:0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~",
58:0123456789!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ ",
60:	{ "punct",	"!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~",

regex/regexec.c
34: *	@(#)regexec.c	8.3 (Berkeley) 3/20/94
57:#define	states1	states		/* for later use in regexec() decision */
58:#define	CLEAR(v)	((v) = 0)
59:#define	SET0(v, n)	((v) &= ~((unsigned long)1 << (n)))
60:#define	SET1(v, n)	((v) |= (unsigned long)1 << (n))
61:#define	ISSET(v, n)	(((v) & ((unsigned long)1 << (n))) != 0)
62:#define	ASSIGN(d, s)	((d) = (s))
63:#define	EQ(a, b)	((a) == (b))
65:#define	STATESETUP(m, n)	/* nothing */
66:#define	STATETEARDOWN(m)	/* nothing */
67:#define	SETUP(v)	((v) = 0)
69:#define	INIT(o, n)	((o) = (unsigned long)1 << (n))
70:#define	INC(o)		((o) <<= 1)
71:#define	ISSTATEIN(v, o)	(((v) & (o)) != 0)
74:#define	FWD(dst, src, n)	((dst) |= ((unsigned long)(src)&(here)) << (n))
75:#define	BACK(dst, src, n)	((dst) |= ((unsigned long)(src)&(here)) >> (n))
76:#define	ISSETBACK(v, n)		(((v) & ((unsigned long)here >> (n))) != 0)
105:#define	CLEAR(v)	memset(v, 0, m->g->nstates)
106:#define	SET0(v, n)	((v)[n] = 0)
107:#define	SET1(v, n)	((v)[n] = 1)
108:#define	ISSET(v, n)	((v)[n])
109:#define	ASSIGN(d, s)	memcpy(d, s, m->g->nstates)
110:#define	EQ(a, b)	(memcmp(a, b, m->g->nstates) == 0)
112:#define	STATESETUP(m, nv)	{ (m)->space = reallocarray(NULL, 	    \
116:#define	STATETEARDOWN(m)	{ free((m)->space); }
117:#define	SETUP(v)	((v) = &m->space[m->vn++ * m->g->nstates])
119:#define	INIT(o, n)	((o) = (n))
120:#define	INC(o)	((o)++)
121:#define	ISSTATEIN(v, o)	((v)[o])
124:#define	FWD(dst, src, n)	((dst)[here+(n)] |= (src)[here])
125:#define	BACK(dst, src, n)	((dst)[here-(n)] |= (src)[here])
126:#define	ISSETBACK(v, n)	((v)[here - (n)])
147:#	define	GOODFLAGS(f)	(f)
149:#	define	GOODFLAGS(f)	((f)&(REG_NOTBOL|REG_NOTEOL|REG_STARTEND))

net/getifaddrs.c
44:#define	SALIGN	(sizeof(long) - 1)
45:#define	SA_RLEN(sa)	((sa)->sa_len ? (((sa)->sa_len + SALIGN) & ~SALIGN) : (SALIGN + 1))
123:#define	RTA_MASKS	(RTA_NETMASK | RTA_IFA | RTA_BRD)

net/res_comp.c
334:#define	hyphenchar(c) ((c) == 0x2d)
335:#define bslashchar(c) ((c) == 0x5c)
336:#define underscorechar(c) ((c) == 0x5f)
337:#define periodchar(c) ((c) == PERIOD)
338:#define asterchar(c) ((c) == 0x2a)
339:#define alphachar(c) (((c) >= 0x41 && (c) <= 0x5a) \
341:#define digitchar(c) ((c) >= 0x30 && (c) <= 0x39)
343:#define borderchar(c) (alphachar(c) || digitchar(c))
344:#define middlechar(c) (borderchar(c) || hyphenchar(c) || underscorechar(c))
345:#define	domainchar(c) ((c) > 0x20 && (c) < 0x7f)

regex/engine.c
35: *	@(#)engine.c	8.5 (Berkeley) 3/20/94
94:#define	BOL	(OUT+1)
95:#define	EOL	(BOL+1)
96:#define	BOLEOL	(BOL+2)
97:#define	NOTHING	(BOL+3)
98:#define	BOW	(BOL+4)
99:#define	EOW	(BOL+5)
101:#define	CODEMAX	(BOL+5)		/* highest code used */
102:#define	NONCHAR(c)	((c) > CHAR_MAX)
103:#define	NNONCHAR	(CODEMAX-CHAR_MAX)
115:#define	SP(t, s, c)	print(m, t, s, c, stdout)
116:#define	AT(t, p1, p2, s1, s2)	at(m, t, p1, p2, s1, s2)
117:#define	NOTE(str)	{ if (m->eflags&REG_TRACE) (void)printf("=%s\n", (str)); }
120:#define	SP(t, s, c)	/* nothing */
121:#define	AT(t, p1, p2, s1, s2)	/* nothing */
122:#define	NOTE(s)	/* nothing */
996:#define	PNONCHAR(c)						\

net/inet_addr.3
31:.\"     @(#)inet.3	8.1 (Berkeley) 6/4/93

net/res_random.c
77:#define RU_AGEN		7	/* determine ru_a as RU_AGEN^(2*rand) */
79:#define RU_ROUNDS	11	/* Number of rounds for permute (odd) */

net/inet_lnaof.3
31:.\"     @(#)inet.3	8.1 (Berkeley) 6/4/93

net/inet_ntop.3
31:.\"     @(#)inet.3	8.1 (Berkeley) 6/4/93

net/inet_ntoa.c
47:#define	UC(b)	(((int)b)&0xff)

net/Makefile.inc
27:#	htonl() htons() ntohl() ntohs()

net/if_indextoname.3
29:.\"     From: @(#)rcmd.3	8.1 (Berkeley) 6/4/93

sha384hl.c
36:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

nls/catopen.c
44:#define MAXIMUM(a, b)	(((a) > (b)) ? (a) : (b))

time/wcsftime.c
54:#define Locale	(&C_time_locale)

time/strptime.c
40:#define	_ctloc(x)		(_CurrentTimeLocale->x)
48:#define	_LEGAL_ALT(x)		{ if (alt_format & ~(x)) return (0); }
53:#define FIELD_TM_MON	(1 << 0)
54:#define FIELD_TM_MDAY	(1 << 1)
55:#define FIELD_TM_WDAY	(1 << 2)
56:#define FIELD_TM_YDAY	(1 << 3)
57:#define FIELD_TM_YEAR	(1 << 4)

time/strftime.3
34:.\"     from: @(#)strftime.3    5.12 (Berkeley) 6/29/91

time/tzfile.h
100:#define TZ_MAX_TYPES	256 /* Limited by what (unsigned char)'s can hold */
126:#define SECSPERHOUR	(SECSPERMIN * MINSPERHOUR)
127:#define SECSPERDAY	((long) SECSPERHOUR * HOURSPERDAY)
156:#define isleap(y) (((y) % 4) == 0 && (((y) % 100) != 0 || ((y) % 400) == 0))
170:#define isleap_sum(a, b)	isleap((a) % 400 + (b) % 400)

time/localtime.c
89:#define BIGGEST(a, b)	(((a) > (b)) ? (a) : (b))
1547:#define WRONG	(-1)

time/asctime.c
59:#define MAX_ASCTIME_BUF_SIZE	(2*3+5*INT_STRLEN_MAXIMUM(int)+7+2+1+1)

sha512_256hl.c
36:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

crypt/arc4random.c
39:#define minimum(a, b) ((a) < (b) ? (a) : (b))
41:#if defined(__GNUC__) || defined(_MSC_VER)
50:#define RSBUFSZ	(16*BLOCKSZ)

crypt/chacha_private.h
17:#define U8C(v) (v##U)
18:#define U32C(v) (v##U)
20:#define U8V(v) ((u8)(v) & U8C(0xFF))
21:#define U32V(v) ((u32)(v) & U32C(0xFFFFFFFF))
23:#define ROTL32(v, n) \
26:#define U8TO32_LITTLE(p) \
32:#define U32TO8_LITTLE(p, v) \
40:#define ROTATE(v,c) (ROTL32(v,c))
41:#define XOR(v,w) ((v) ^ (w))
42:#define PLUS(v,w) (U32V((v) + (w)))
43:#define PLUSONE(v) (PLUS((v),1))
45:#define QUARTERROUND(a,b,c,d) \

crypt/blowfish.c
59:#define F(s, x) ((((s)[        (((x)>>24)&0xFF)]  \
64:#define BLFRND(s,p,i,j,n) (i ^= F(s,j) ^ (p)[n])

crypt/bcrypt.c
52:#define BCRYPT_MINLOGROUNDS 4	/* we have log2(rounds) in salt */
54:#define	BCRYPT_SALTSPACE	(7 + (BCRYPT_MAXSALT * 4 + 2) / 3 + 1)
294:#define CHAR64(c)  ( (c) > 127 ? 255 : index_64[(c)])

softfloat/softfloat.c
67:#define FLOAT64_DEMANGLE(a)	(a)
70:#define FLOAT64_MANGLE(a)	(a)

time/difftime.c
6:#define HI(t) ((double)(t & 0xffffffff00000000LL))
7:#define LO(t) ((double)(t & 0x00000000ffffffffLL))

time/private.h
49:#define TYPE_BIT(type)	(sizeof (type) * CHAR_BIT)
53:#define TYPE_SIGNED(type) (((type) -1) < 0)
63:#define INT_STRLEN_MAXIMUM(type) \
68:#define _(msgid) msgid
87:#define SECSPERREPEAT		((int_fast64_t) YEARSPERREPEAT * (int_fast64_t) AVGSECSPERYEAR)
91:#define SECSPERREPEAT_BITS	34	/* ceil(log2(SECSPERREPEAT)) */

time/strftime.c
55:#define Locale	_loc()
58:#define Locale	(&C_time_locale)

softfloat/milieu.h
1:#if defined(__arm__)
3:#elif defined(__sh__)

softfloat/softfloat.h
150:#if defined(SOFTFLOAT_FOR_GCC) && defined(SOFTFLOAT_NEED_FIXUNS)
194:#if defined(SOFTFLOAT_FOR_GCC) && defined(SOFTFLOAT_NEED_FIXUNS)

softfloat/softfloat-specialize.h
108:#if defined(SOFTFLOAT_FOR_GCC) && !defined(SOFTFLOATSPARC64_FOR_GCC)
182:#define float64_default_nan LIT64( 0xFFFFFFFFFFFFFFFF )
207:#if defined(SOFTFLOAT_FOR_GCC) && !defined(SOFTFLOATSPARC64_FOR_GCC)
291:#define floatx80_default_nan_low  LIT64( 0xFFFFFFFFFFFFFFFF )
396:#define float128_default_nan_high LIT64( 0xFFFFFFFFFFFFFFFF )
397:#define float128_default_nan_low  LIT64( 0xFFFFFFFFFFFFFFFF )

hidden/db.h
29:#define	M_32_SWAP(a) {							\
36:#define	P_32_SWAP(a) {							\
43:#define	P_32_COPY(a, b) {						\
56:#define	M_16_SWAP(a) {							\
61:#define	P_16_SWAP(a) {							\
66:#define	P_16_COPY(a, b) {						\

hidden/stdlib.h
32: *	@(#)stdlib.h	5.13 (Berkeley) 6/4/91

sha256hl.c
36:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

arch/m88k/DEFS.h
11:#define _HIDDEN(x)		_libc_##x
12:#define _HIDDEN_ALIAS(x,y)			\
15:#define _HIDDEN_FALIAS(x,y)			\
24:#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x); END(_HIDDEN(x))
25:#define	END_WEAK(x)	END_STRONG(x); .weak x

arch/m88k/SYS.h
34: *	from: @(#)SYS.h	5.5 (Berkeley) 5/7/91
41:#define	__CONCAT(p,x)		p##x
42:#define	__ENTRY(p,x)		ENTRY(__CONCAT(p,x))
43:#define	__END(p,x)		END(__CONCAT(p,x)); \
46:#define	__SYSCALLNAME(p,x)	__CONCAT(p,x)
47:#define	__ALIAS(prefix,name)	WEAK_ALIAS(name,__CONCAT(prefix,name))
50:#define	PIC_SAVE(reg)		or reg, %r25, %r0
51:#define	PIC_RESTORE(reg)	or %r25, reg, %r0
60:#define	PIC_LOAD(reg,sym)						\
64:#define	PIC_STORE(reg,sym)						\
69:#define	PIC_LOAD(reg,sym)						\
72:#define	PIC_STORE(reg,sym)						\
79:#define	__DO_SYSCALL(x)							\
83:#define	__SYSCALL__NOERROR(p,x,y)					\
87:#define	__SYSCALL_HIDDEN__NOERROR(p,x,y)				\
91:#define	__SYSCALL(p,x,y)						\
94:#define	__SYSCALL_HIDDEN(p,x,y)						\
98:#define	__PSEUDO_NOERROR(p,x,y)						\
104:#define	__PSEUDO(p,x,y)							\
108:#define	__PSEUDO_HIDDEN(p,x,y)						\
118:#define	SYSCALL(x)		__SYSCALL(_thread_sys_,x,x)
119:#define	RSYSCALL(x)		__PSEUDO(_thread_sys_,x,x)
120:#define	RSYSCALL_HIDDEN(x)	__PSEUDO_HIDDEN(_thread_sys_,x,x)
121:#define	PSEUDO(x,y)		__PSEUDO(_thread_sys_,x,y)
122:#define	PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(_thread_sys_,x,y)
123:#define	SYSENTRY_HIDDEN(x)	__ENTRY(_thread_sys_,x)
124:#define	SYSENTRY(x)		SYSENTRY_HIDDEN(x);		\
126:#define	SYSCALL_END_HIDDEN(x)	__END(_thread_sys_,x)
127:#define	SYSCALL_END(x)		SYSCALL_END_HIDDEN(x); END(x)

arch/powerpc/gen/setjmp.S
62:	.zero	4*2		# (r1, lr)

arch/powerpc/sys/sbrk.S
57:	lwz	5, 0(6)		/* # 5 = *6 (old_curbrk) */

arch/powerpc/SYS.h
37: *	from: @(#)SYS.h	8.1 (Berkeley) 6/4/93
49:#define	TCB_OFFSET_ERRNO	(-8)
54:#define	R2_OFFSET_ERRNO		(-TCB_OFFSET + TCB_OFFSET_ERRNO)
62:#define _HIDDEN(x)		_libc_##x
63:#define _HIDDEN_ALIAS(x,y)			\
66:#define _HIDDEN_FALIAS(x,y)			\
75:#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x); END(_HIDDEN(x))
76:#define	END_WEAK(x)	END_STRONG(x); .weak x
79:#define _CONCAT(x,y)	x##y
80:#define PSEUDO_PREFIX(p,x,y)	\
93:#define __END_HIDDEN(p,x)	END(p##x);			\
96:#define __END(p,x)		__END_HIDDEN(p,x); END(x)
99:#define ALIAS(x,y)		WEAK_ALIAS(y,_CONCAT(x,y));
101:#define PREFIX_HIDDEN(x)	PSEUDO_PREFIX(_thread_sys_,x,x)
102:#define PREFIX(x)		ALIAS(_thread_sys_,x) \
104:#define	PSEUDO_NOERROR(x,y)	ALIAS(_thread_sys_,x) \
110:#define	PSEUDO_HIDDEN(x,y)	PSEUDO_PREFIX(_thread_sys_,x,y) ; \
114:#define	PSEUDO(x,y)		ALIAS(_thread_sys_,x) \
118:#define RSYSCALL(x)		PSEUDO(x,x)
119:#define RSYSCALL_HIDDEN(x)	PSEUDO_HIDDEN(x,x)
120:#define SYSCALL_END_HIDDEN(x)	__END_HIDDEN(_thread_sys_,x)
121:#define SYSCALL_END(x)		__END(_thread_sys_,x)

arch/arm/softfloat/arm-gcc.h
72:defined as the identity macro:  `#define LIT64( a ) a'.
75:#define LIT64( a ) a##LL
93:#if defined(__VFP_FP__) || defined(__ARMEB__)
94:#define FLOAT64_DEMANGLE(a)	(a)
95:#define FLOAT64_MANGLE(a)	(a)
97:#define FLOAT64_DEMANGLE(a)	(((a) << 32) | ((a) >> 32))
98:#define FLOAT64_MANGLE(a)	FLOAT64_DEMANGLE(a)

arch/arm/gen/setjmp.S
59:	str	r0, [r2, #(25 * 4)]
104:	ldr	r1, [r0, #(25 * 4)]

arch/arm/gen/divsi3.S
42:#if !defined(_KERNEL) && !defined(_STANDALONE)

arch/arm/string/_memcpy.S
291:	subs	r2, r2, #0x14		/* less than 32 bytes (12 from above) */

arch/arm/DEFS.h
26:#define _HIDDEN(x)		_libc_##x
27:#define _HIDDEN_ALIAS(x,y)			\
30:#define _HIDDEN_FALIAS(x,y)			\
45:#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x); END(_HIDDEN(x))
46:#define	END_WEAK(x)	END_STRONG(x); .weak x
49:#define	END_BUILTIN(x)	END(x); .protected x
50:#define	_BUILTIN(x)	x
52:#define	END_BUILTIN(x)	END_STRONG(x)
53:#define	_BUILTIN(x)	_HIDDEN(x)

arch/arm/SYS.h
35: *	from: @(#)SYS.h	5.5 (Berkeley) 5/7/91
42:#define SYSENTRY(x)					\
46:#define SYSENTRY_HIDDEN(x)				\
48:#define __END_HIDDEN(x)					\
52:#define __END(x)					\
55:#define SYSTRAP(x) \
59:#define	CERROR		_C_LABEL(__cerror)
61:#define _SYSCALL_NOERROR(x,y)						\
64:#define _SYSCALL_HIDDEN_NOERROR(x,y)					\
68:#define _SYSCALL(x, y)							\
71:#define _SYSCALL_HIDDEN(x, y)						\
75:#define SYSCALL_NOERROR(x)						\
78:#define SYSCALL(x)							\
82:#define PSEUDO_NOERROR(x,y)						\
87:#define PSEUDO(x,y)							\
91:#define PSEUDO_HIDDEN(x,y)						\
97:#define RSYSCALL_NOERROR(x)						\
100:#define RSYSCALL(x)							\
102:#define RSYSCALL_HIDDEN(x)						\
104:#define SYSCALL_END(x)							\
106:#define SYSCALL_END_HIDDEN(x)						\

arch/arm/sys/brk.S
32: *	from: @(#)brk.s	5.2 (Berkeley) 12/17/90

arch/arm/sys/Ovfork.S
32: *	from: @(#)Ovfork.s	5.1 (Berkeley) 4/23/90

arch/arm/sys/syscall.S
32: *	from: @(#)syscall.s	5.1 (Berkeley) 4/23/90

arch/arm/sys/sigpending.S
32: *	from: @(#)sigpending.s	5.1 (Berkeley) 7/1/90

arch/arm/sys/sbrk.S
32: *	from: @(#)sbrk.s	5.1 (Berkeley) 4/23/90

arch/arm/sys/cerror.S
32: *	from: @(#)cerror.s	5.1 (Berkeley) 4/23/90
38:#define TCB_OFFSET_ERRNO	(-8)

arch/arm/sys/sigprocmask.S
32: *	from: @(#)sigprocmask.s	5.2 (Berkeley) 12/17/90

arch/amd64/gen/setjmp.S
47:	.zero 8*3		# (rbp, rsp, pc)

arch/amd64/gen/modf.S
39: *	from: @(#)modf.s	5.5 (Berkeley) 3/18/91

arch/amd64/DEFS.h
34: *	from: @(#)SYS.h	5.5 (Berkeley) 5/7/91
46:#define _HIDDEN(x)		_libc_##x
47:#define _HIDDEN_ALIAS(x,y)			\
50:#define _HIDDEN_FALIAS(x,y)			\
62:#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x); END(_HIDDEN(x))
63:#define	END_WEAK(x)	END_STRONG(x); .weak x
66:#define	END_BUILTIN(x)	END(x); .protected x
68:#define	END_BUILTIN(x)	END_STRONG(x)

arch/amd64/gdtoa/arith.h
4:#define Intcast (int)(long)

arch/amd64/sys/brk.S
35: *	from: @(#)brk.s	5.2 (Berkeley) 12/17/90

arch/amd64/SYS.h
34: *	from: @(#)SYS.h	5.5 (Berkeley) 5/7/91
44:#define SYSTRAP(x)	movl $(SYS_ ## x),%eax; movq %rcx, %r10; syscall
46:#define SYSENTRY(x)							\
49:#define SYSENTRY_HIDDEN(x)						\
52:#define	SYSCALL_END_HIDDEN(x)						\
56:#define	SYSCALL_END(x)		SYSCALL_END_HIDDEN(x); END(x)
67:#define _SYSCALL_NOERROR(x,y)						\
70:#define _SYSCALL_HIDDEN_NOERROR(x,y)					\
74:#define SYSCALL_NOERROR(x)						\
77:#define SYSCALL_HIDDEN(x)						\
80:#define SYSCALL(x)							\
92:#define PSEUDO_NOERROR(x,y)						\
97:#define PSEUDO(x,y)							\
101:#define PSEUDO_HIDDEN(x,y)						\
106:#define RSYSCALL_NOERROR(x)						\
109:#define RSYSCALL(x)							\
111:#define RSYSCALL_HIDDEN(x)						\

arch/arm/sys/sigsuspend.S
32: *	from: @(#)sigsuspend.s	5.2 (Berkeley) 12/17/90

arch/amd64/sys/syscall.S
35: *	from: @(#)syscall.s	5.1 (Berkeley) 4/23/90

arch/amd64/sys/Ovfork.S
35: *	from: @(#)Ovfork.s	5.1 (Berkeley) 4/23/90

arch/amd64/sys/sigsuspend.S
35: *	from: @(#)sigsuspend.s	5.2 (Berkeley) 12/17/90

arch/amd64/sys/sigpending.S
35: *	from: @(#)sigpending.s	5.1 (Berkeley) 7/1/90

arch/amd64/sys/sbrk.S
39: *	from: @(#)sbrk.s	5.1 (Berkeley) 4/23/90

arch/amd64/sys/sigprocmask.S
35: *	from: @(#)sigprocmask.s	5.2 (Berkeley) 12/17/90

arch/alpha/gdtoa/arith.h
4:#define Intcast (int)(long)

arch/alpha/SYS.h
37:#define	TCB_OFFSET_ERRNO	(-12)
45:#define _HIDDEN(x)		_libc_##x
46:#define _HIDDEN_ALIAS(x,y)			\
49:#define _HIDDEN_FALIAS(x,y)			\
57:#define _END(x)		.size x, . - x
64:#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x);		\
66:#define	END_WEAK(x)	END_STRONG(x); .weak x
69:#define	CALLSYS_ERROR(name)					\
79:#define __LEAF(p,n,e)						\
81:#define __END(p,n)						\
86:#define	__SYSCALL(p,name)					\
90:#define	__SYSCALL_NOERROR(p,name)				\
95:#define __RSYSCALL(p,name)					\
100:#define __RSYSCALL_NOERROR(p,name)				\
106:#define	__PSEUDO(p,label,name)					\
112:#define	__PSEUDO_NOERROR(p,label,name)				\
118:#define ALIAS(prefix,name) WEAK_ALIAS(name, ___CONCAT(prefix,name));
124:# define SYSCALL(x)		ALIAS(_thread_sys_,x) \
126:# define SYSCALL_NOERROR(x)	ALIAS(_thread_sys_,x) \
128:# define RSYSCALL(x)		ALIAS(_thread_sys_,x) \
131:# define RSYSCALL_HIDDEN(x)	__RSYSCALL(_thread_sys_,x)
132:# define RSYSCALL_NOERROR(x)	ALIAS(_thread_sys_,x) \
135:# define PSEUDO(x,y)		ALIAS(_thread_sys_,x) \
138:# define PSEUDO_NOERROR(x,y)	ALIAS(_thread_sys_,x) \
141:# define SYSLEAF_HIDDEN(x,e)	__LEAF(_thread_sys_,x,e)
142:# define SYSLEAF(x,e)		ALIAS(_thread_sys_,x) \
144:# define SYSCALL_END_HIDDEN(x)	__END(_thread_sys_,x)
145:# define SYSCALL_END(x)		SYSCALL_END_HIDDEN(x); \

arch/mips64/gen/setjmp.S
41:	.space	3*REGSZ			# (28/gp, 29/sp, 31/ra)

arch/mips64/gen/modf.S
47:	xor	t1, t1, 0x2		#  (i.e., 01)

arch/mips64/gen/ldexp.S
65:	daddu	v0, t3, v0		# multiply by (2**N)
145:	dmtc1	t2, $f0			# save denormalized result (LSW)
157:	dli	t1, 0x7ff0000000000000	# result is infinity (MSW)

arch/mips64/string/bcopy.S
44:	and	t1, t1, t2		# t1 = true if from < to < (from+len)
69:	LWHI	v0, 0(a0)		# get next 4 bytes (unaligned)

arch/mips64/gdtoa/arith.h
8:#define Intcast (int)(long)

arch/mips64/string/bcmp.S
57:	dsubu	a2, a2, a3		#   which has to be >= (16-3) & ~3
83:	dsubu	a2, a2, a3		#   which has to be >= (16-3) & ~3

arch/mips64/SYS.h
44:#define _HIDDEN(x)		_libc_##x
45:#define _HIDDEN_ALIAS(x,y)			\
48:#define _HIDDEN_FALIAS(x,y)			\
57:#define	END_STRONG(x)	END(x);					\
60:#define	END_WEAK(x)	END_STRONG(x); .weak x
66:# define __ENTRY(p,x)		ENTRY(p ## x)
68:# define __DO_SYSCALL(x)				\
72:# define __LEAF2(p,x,sz)	LEAF(p ## x, sz) \
75:# define __END2_HIDDEN(p,x)	END(p ## x); 		\
78:# define __END2(p,x)		__END2_HIDDEN(p,x);	\
81:#define __PSEUDO_NOERROR(p,x,y)				\
87:#define __PSEUDO(p,x,y)   				\
101:#define __PSEUDO_HIDDEN(p,x,y)   			\
117:#define RSYSCALL(x)		__PSEUDO(_thread_sys_,x,x)
118:#define RSYSCALL_HIDDEN(x)	__PSEUDO_HIDDEN(_thread_sys_,x,x)
119:#define PSEUDO(x,y)		__PSEUDO(_thread_sys_,x,y)
120:#define PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(_thread_sys_,x,y)
122:#define	SYSLEAF(x, sz)		__LEAF2(_thread_sys_,x, sz)
123:#define	SYSLEAF_HIDDEN(x, sz)	LEAF(_thread_sys_ ## x, sz)
124:#define	SYSCALL_END(x)		__END2(_thread_sys_,x)
125:#define	SYSCALL_END_HIDDEN(x)	__END2_HIDDEN(_thread_sys_,x)

arch/hppa/SYS.h
45:#define _HIDDEN(x)		_libc_##x
46:#define _HIDDEN_ALIAS(x,y)			\
49:#define _HIDDEN_FALIAS(x,y)			\
60:#define	ALTEXIT_STRONG(x)					\
63:#define	ALTEXIT_WEAK(x)	ALTEXIT_STRONG(x)			!\
65:#define	EXIT_STRONG(x)	EXIT(x)					!\
67:#define	EXIT_WEAK(x)	EXIT_STRONG(x)				!\
71:#define SYSENTRY(x)				!\
74:#define SYSENTRY_HIDDEN(x)			!\
76:#define	SYSEXIT(x)				!\
79:#define	SYSEXIT_HIDDEN(x)			!\
84:#define	SYSCALL(x)				!\
99:#define	PSEUDO(x,y)				!\
105:#define	PSEUDO_HIDDEN(x,y)			!\
112:#define	PSEUDO_NOERROR(x,y)			!\
123:#define	RSYSCALL(x)		PSEUDO(x,x)
124:#define	RSYSCALL_HIDDEN(x)	PSEUDO_HIDDEN(x,x)

arch/sparc64/fpu/fpu_add.c
44: *	@(#)fpu_add.c	8.1 (Berkeley) 6/11/93

arch/sparc64/fpu/fpu_emu.h
44: *	@(#)fpu_emu.h	8.1 (Berkeley) 6/11/93
98:#define	FP_NMANT	115		/* total bits in mantissa (incl g,r) */
100:#define	FP_LG		((FP_NMANT - 1) & 31)	/* log2(1.0) for fp_mant[0] */
101:#define	FP_LG2		((FP_NMANT - 1) & 63)	/* log2(1.0) for fp_mant[0] and fp_mant[1] */
102:#define	FP_QUIETBIT	(1 << (FP_LG - 1))	/* Quiet bit in NaNs (0.5) */
103:#define	FP_1		(1 << FP_LG)		/* 1.0 in fp_mant[0] */
104:#define	FP_2		(1 << (FP_LG + 1))	/* 2.0 in fp_mant[0] */
112:#define	FPC_SNAN	-2		/* signalling NaN (sign irrelevant) */
113:#define	FPC_QNAN	-1		/* quiet NaN (sign irrelevant) */
114:#define	FPC_ZERO	0		/* zero (sign matters) */
115:#define	FPC_NUM		1		/* number (sign matters) */
116:#define	FPC_INF		2		/* infinity (sign matters) */
118:#define	ISNAN(fp)	((fp)->fp_class < 0)
119:#define	ISZERO(fp)	((fp)->fp_class == 0)
120:#define	ISINF(fp)	((fp)->fp_class == FPC_INF)
137:#define	ORDER(x, y) { \
141:#define	SWAP(x, y) { \
162:#define	__fpu_sub(fe) ((fe)->fe_f2.fp_sign ^= 1, __fpu_add(fe))
169:#define	DPRINTF(x, y)	if (__fpe_debug & (x)) printf y
170:#define DUMPFPN(x, f)	if (__fpe_debug & (x)) __fpu_dumpfpn((f))
172:#define	DPRINTF(x, y)
173:#define DUMPFPN(x, f)
176:#define FSR_GET_RD(fsr)		(((fsr) >> FSR_RD_SHIFT) & FSR_RD_MASK)

arch/sparc64/fpu/fpu_qp.c
39:#define	_QP_OP(op) \
40:__dso_hidden void _Qp_ ## op(u_int *c, u_int *a, u_int *b); \
43:_Qp_ ## op(u_int *c, u_int *a, u_int *b) \
54:	r = __fpu_ ## op(&fe); \
59:#define	_QP_TTOQ(qname, fname, ntype, atype, signed, ...) \
60:void _Qp_ ## qname ## toq(u_int *c, ntype n); \
63:_Qp_ ## qname ## toq(u_int *c, ntype n) \
71:	fe.fe_f1.fp_class = __fpu_ ## fname ## tof(&fe.fe_f1, __VA_ARGS__); \
76:#define	_QP_QTOT4(qname, fname, type, x)		\
77:type _Qp_qto ## qname(u_int *c); \
80:_Qp_qto ## qname(u_int *c) \
90:	a[0] = __fpu_fto ## fname(&fe, &fe.fe_f1, x); \
95:#define	_QP_QTOT3(qname, fname, type)		\
96:type _Qp_qto ## qname(u_int *c); \
99:_Qp_qto ## qname(u_int *c) \
109:	a[0] = __fpu_fto ## fname(&fe, &fe.fe_f1); \
114:#define	_QP_QTOT(qname, fname, type, ...) \
115:type _Qp_qto ## qname(u_int *c); \
118:_Qp_qto ## qname(u_int *c) \
128:	a[0] = __fpu_fto ## fname(&fe, &fe.fe_f1, ## __VA_ARGS__); \
133:#define	FCC_EQ(fcc)	((fcc) == FSR_CC_EQ)
134:#define	FCC_GE(fcc)	((fcc) == FSR_CC_EQ || (fcc) == FSR_CC_GT)
135:#define	FCC_GT(fcc)	((fcc) == FSR_CC_GT)
136:#define	FCC_LE(fcc)	((fcc) == FSR_CC_EQ || (fcc) == FSR_CC_LT)
137:#define	FCC_LT(fcc)	((fcc) == FSR_CC_LT)
138:#define	FCC_NE(fcc)	((fcc) != FSR_CC_EQ)
139:#define	FCC_ID(fcc)	(fcc)
141:#define	FSR_GET_FCC0(fsr)	(((fsr) >> FSR_FCC_SHIFT) & FSR_FCC_MASK)
143:#define	_QP_CMP(name, cmpe, test) \
144:int _Qp_ ## name(u_int *a, u_int *b) ; \
147:_Qp_ ## name(u_int *a, u_int *b) \

arch/sparc64/fpu/fpu_explode.c
44: *	@(#)fpu_explode.c	8.1 (Berkeley) 6/11/93
193:#define	mask(nbits) ((1L << (nbits)) - 1)
199:#define	FP_TOF(exp, expbias, allfrac, f0, f1, f2, f3) \
239:#define SNG_SHIFT (SNG_FRACBITS - FP_LG)
259:#define DBL_SHIFT (DBL_FRACBITS - 32 - FP_LG)
280:#define EXT_SHIFT (-(EXT_FRACBITS - 3 * 32 - FP_LG))	/* left shift! */

arch/sparc64/fpu/fpu_mul.c
44: *	@(#)fpu_mul.c	8.1 (Berkeley) 6/11/93

arch/sparc64/fpu/fpu_subr.c
44: *	@(#)fpu_subr.c	8.1 (Berkeley) 6/11/93

arch/sparc64/fpu/fpu_arith.h
44: *	@(#)fpu_arith.h	8.1 (Berkeley) 6/11/93
82:#define	FPU_ADDC(r, x, y) \
84:#define	FPU_ADDS(r, x, y) \
86:#define	FPU_ADDCS(r, x, y) \
88:#define	FPU_SUBC(r, x, y) \
90:#define	FPU_SUBS(r, x, y) \
92:#define	FPU_SUBCS(r, x, y) \
95:#define	FPU_GET_CARRY(r) __asm volatile("addx %%g0,%%g0,%0" : "=r"(r))
96:#define	FPU_SET_CARRY(v) __asm volatile("addcc %0,-1,%%g0" : : "r"(v))
98:#define	FPU_SHL1_BY_ADD	/* shift left 1 faster by ADDC than (a<<1)|(b>>31) */

arch/sparc64/fpu/fpu_compare.c
44: *	@(#)fpu_compare.c	8.1 (Berkeley) 6/11/93
155:#define opposite_cc(cc) ((cc) == FSR_CC_LT ? FSR_CC_GT : FSR_CC_LT)
156:#define	diff(magnitude) (a->fp_sign ? opposite_cc(magnitude) :  (magnitude))

arch/sparc64/fpu/fpu_sqrt.c
44: *	@(#)fpu_sqrt.c	8.1 (Berkeley) 6/11/93
149: * #if (NBITS is even)
158: * #if (NBITS is odd)
241:#if (FP_NMANT & 1) != 0

arch/sparc64/fpu/fpu_implode.c
44: *	@(#)fpu_implode.c	8.1 (Berkeley) 6/11/93
71:#define	FSR_GET_RD(fsr)		(((fsr) >> FSR_RD_SHIFT) & FSR_RD_MASK)
307:#define	SNG_EXP(e)	((e) << SNG_FRACBITS)	/* makes e an exponent */
308:#define	SNG_MASK	(SNG_EXP(1) - 1)	/* mask for fraction */
392:#define	DBL_EXP(e)	((e) << (DBL_FRACBITS & 31))
393:#define	DBL_MASK	(DBL_EXP(1) - 1)
453:#define	EXT_EXP(e)	((e) << (EXT_FRACBITS & 31))
454:#define	EXT_MASK	(EXT_EXP(1) - 1)

arch/sparc64/gdtoa/arith.h
4:#define Intcast (int)(long)

arch/sparc64/fpu/fpu_div.c
44: *	@(#)fpu_div.c	8.1 (Berkeley) 6/11/93
229:#define	LOOP			/* do ... while (bit >>= 1) */ \
239:#define	WORD(r, i)			/* calculate r->fp_mant[i] */ \

arch/sparc64/SYS.h
34: *	@(#)SYS.h	8.1 (Berkeley) 6/4/93
47:#define _CAT(x,y) x##y
49:#define	__ENTRY(p,x)		ENTRY(_CAT(p,x)) ; .weak x; x = _CAT(p,x)
50:#define	__ENTRY_HIDDEN(p,x)	ENTRY(_CAT(p,x))
59:#define _HIDDEN(x)		_libc_##x
60:#define _HIDDEN_ALIAS(x,y)			\
63:#define _HIDDEN_FALIAS(x,y)			\
72:#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x); END(_HIDDEN(x))
73:#define	END_WEAK(x)	END_STRONG(x); .weak x
76:#define __END_HIDDEN(p,x)	END(_CAT(p,x));				\
79:#define __END(p,x)		__END_HIDDEN(p,x); END(x)
84:#define	ERROR()							\
94:#define	_SYSCALL(p,x,y) \
96:#define	_SYSCALL_HIDDEN(p,x,y) \
99:#define	__SYSCALL(p,x) \
102:#define	__SYSCALL_HIDDEN(p,x) \
110:#define	__RSYSCALL(p,x) \
113:#define	__RSYSCALL_HIDDEN(p,x) \
120:#define	__PSEUDO(p,x,y) \
130:#define __SYSCALL_NOERROR(p,x) \
139:#define __RSYSCALL_NOERROR(p,x) \
146:#define __PSEUDO_NOERROR(p,x,y) \
153:#define	SYSCALL(x)		__SYSCALL(_thread_sys_,x)
154:#define	RSYSCALL(x)		__RSYSCALL(_thread_sys_,x)
155:#define	RSYSCALL_HIDDEN(x)	__RSYSCALL_HIDDEN(_thread_sys_,x)
156:#define	RSYSCALL_NOERROR(x,y)	__RSYSCALL_NOERROR(_thread_sys_,x,y)
157:#define	PSEUDO(x,y)		__PSEUDO(_thread_sys_,x,y)
158:#define	PSEUDO_NOERROR(x,y)	__PSEUDO_NOERROR(_thread_sys_,x,y)
159:#define	SYSENTRY(x)		__ENTRY(_thread_sys_,x)
160:#define	SYSENTRY_HIDDEN(x)	__ENTRY_HIDDEN(_thread_sys_,x)
161:#define	SYSCALL_END(x)		__END(_thread_sys_,x)
162:#define	SYSCALL_END_HIDDEN(x)	__END_HIDDEN(_thread_sys_,x)

arch/aarch64/gen/setjmp.S
43:	str	w0, [x2, #(_JB_SIGMASK * 8)]	/* oset */
79:	ldr	w1, [x2, #(_JB_SIGMASK * 8)]	/* set */

arch/aarch64/gen/fpgetmask.c
38:#define FP_X_MASK	(FP_X_INV | FP_X_DZ | FP_X_OFL | FP_X_UFL | FP_X_IMP)

arch/aarch64/gen/fpgetsticky.c
38:#define FP_X_MASK	(FP_X_INV | FP_X_DZ | FP_X_OFL | FP_X_UFL | FP_X_IMP)

arch/aarch64/gen/fpsetmask.c
38:#define FP_X_MASK	(FP_X_INV | FP_X_DZ | FP_X_OFL | FP_X_UFL | FP_X_IMP)

arch/aarch64/DEFS.h
34: *	from: @(#)SYS.h	5.5 (Berkeley) 5/7/91
46:#define _HIDDEN(x)		_libc_##x
47:#define _HIDDEN_ALIAS(x,y)			\
50:#define _HIDDEN_FALIAS(x,y)			\
59:#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x); END(_HIDDEN(x))
60:#define	END_WEAK(x)	END_STRONG(x); .weak x

arch/aarch64/gdtoa/arith.h
4:#define Intcast (int)(long)

arch/aarch64/sys/Ovfork.S
32: *	from: @(#)Ovfork.s	5.1 (Berkeley) 4/23/90

arch/aarch64/SYS.h
35: *	from: @(#)SYS.h	5.5 (Berkeley) 5/7/91
42:#define SYSENTRY(x)					\
46:#define SYSENTRY_HIDDEN(x)				\
48:#define __END_HIDDEN(x)					\
52:#define __END(x)					\
55:#define SYSTRAP(x) \
59:#define	CERROR		_C_LABEL(__cerror)
61:#define _SYSCALL_NOERROR(x,y)						\
64:#define _SYSCALL_HIDDEN_NOERROR(x,y)					\
68:#define _SYSCALL(x, y)							\
71:#define _SYSCALL_HIDDEN(x, y)						\
75:#define SYSCALL_NOERROR(x)						\
78:#define SYSCALL(x)							\
82:#define PSEUDO_NOERROR(x,y)						\
87:#define PSEUDO(x,y)							\
91:#define PSEUDO_HIDDEN(x,y)						\
96:#define RSYSCALL_NOERROR(x)						\
99:#define RSYSCALL(x)							\
101:#define RSYSCALL_HIDDEN(x)						\
103:#define SYSCALL_END(x)							\
105:#define SYSCALL_END_HIDDEN(x)						\

arch/aarch64/sys/brk.S
32: *	from: @(#)brk.s	5.2 (Berkeley) 12/17/90
87:#if !defined(__PIC__)

arch/aarch64/gen/fpsetsticky.c
38:#define FP_X_MASK	(FP_X_INV | FP_X_DZ | FP_X_OFL | FP_X_UFL | FP_X_IMP)

arch/aarch64/sys/syscall.S
32: *	from: @(#)syscall.s	5.1 (Berkeley) 4/23/90

arch/aarch64/sys/sigsuspend.S
32: *	from: @(#)sigsuspend.s	5.2 (Berkeley) 12/17/90

arch/aarch64/sys/sigpending.S
32: *	from: @(#)sigpending.s	5.1 (Berkeley) 7/1/90

arch/aarch64/sys/cerror.S
32:#define TCB_OFFSET_ERRNO	(-12)

arch/aarch64/sys/sbrk.S
32: *	from: @(#)sbrk.s	5.1 (Berkeley) 4/23/90
77:#if !defined(__PIC__)

arch/aarch64/sys/sigprocmask.S
32: *	from: @(#)sigprocmask.s	5.2 (Berkeley) 12/17/90

arch/i386/gen/setjmp.S
41:	.zero	4*3		# (eip, esp, ebp)

arch/i386/string/strcat.S
9:#if defined(APIWARN)

arch/i386/string/strcpy.S
9:#if defined(APIWARN)

arch/i386/DEFS.h
26:#define _HIDDEN(x)		_libc_##x
27:#define _HIDDEN_ALIAS(x,y)			\
30:#define _HIDDEN_FALIAS(x,y)			\
42:#define	END_STRONG(x)	END(x); _HIDDEN_FALIAS(x,x); END(_HIDDEN(x))
43:#define	END_WEAK(x)	END_STRONG(x); .weak x
46:#define	END_BUILTIN(x)	END(x); .protected x
48:#define	END_BUILTIN(x)	END_STRONG(x)

arch/i386/SYS.h
50:#define	SYSENTRY(x)					\
53:#define	SYSENTRY_HIDDEN(x)				\
55:#define	__END_HIDDEN(x)	END(_thread_sys_ ## x);			\
58:#define	__END(x)	__END_HIDDEN(x); END(x)
60:#define	__DO_SYSCALL(x)					\
64:#define SET_ERRNO()					\
68:#define HANDLE_ERRNO()					\
74:#define	_SYSCALL_NOERROR(x,y)				\
77:#define	_SYSCALL_HIDDEN_NOERROR(x,y)			\
81:#define	SYSCALL_NOERROR(x)				\
85:#define	_SYSCALL(x,y)					\
90:#define	_SYSCALL_HIDDEN(x,y)				\
96:#define	SYSCALL(x)					\
98:#define	SYSCALL_HIDDEN(x)				\
102:#define	PSEUDO_NOERROR(x,y)				\
108:#define	PSEUDO(x,y)					\
112:#define	PSEUDO_HIDDEN(x,y)				\
118:#define	RSYSCALL(x)					\
120:#define	RSYSCALL_HIDDEN(x)				\
122:#define	SYSCALL_END(x)	__END(x)
123:#define	SYSCALL_END_HIDDEN(x)				\

arch/sh/net/htonl.c
35: *	from: @(#)htonl.s	5.2 (Berkeley) 12/17/90

arch/sh/net/ntohs.c
35: *	from: @(#)ntohl.s	5.2 (Berkeley) 12/17/90

arch/sh/net/ntohl.c
35: *	from: @(#)ntohl.s	5.2 (Berkeley) 12/17/90

arch/sh/net/htons.c
35: *	from: @(#)htonl.s	5.2 (Berkeley) 12/17/90

arch/sh/softfloat/sh-gcc.h
67:defined as the identity macro:  `#define LIT64( a ) a'.
70:#define LIT64( a ) a##LL
87:#define FLOAT64_DEMANGLE(a)	(a)
88:#define FLOAT64_MANGLE(a)	(a)

arch/sh/gen/setjmp.S
35: *	from: @(#)setjmp.s	5.1 (Berkeley) 4/23/90
69:#if defined(__SH4__) && !defined(__SH4_NOFPU__)
70:	add	#(_JBLEN * 4), r4
87:	add	#((_JBLEN - 10) * 4), r4
140:#if defined(__SH4__) && !defined(__SH4_NOFPU__)

arch/sh/gen/sigsetjmp.S
35: *	from: @(#)setjmp.s	5.1 (Berkeley) 4/23/90
65:#if defined(__SH4__) && !defined(__SH4_NOFPU__)
66:	add	#(_JBLEN * 4), r4
83:	add	#((_JBLEN - 10) * 4), r4
139:#if defined(__SH4__) && !defined(__SH4_NOFPU__)

arch/sh/gen/fabs.c
19:#if !defined(__SH4__) || defined(__SH4_NOFPU__)
22:#endif /* !defined(__SH4__) || defined(__SH4_NOFPU__) */
29:#if defined(__SH4__) && !defined(__SH4_NOFPU__)

arch/sh/gen/fpsetround.c
26:#if defined(__SH4__) && !defined(__SH4_NOFPU__)
33:#if defined(__SH4__) && !defined(__SH4_NOFPU__)

arch/sh/gen/fpsetmask.c
26:#if defined(__SH4__) && !defined(__SH4_NOFPU__)

arch/sh/gen/fpsetsticky.c
26:#if defined(__SH4__) && !defined(__SH4_NOFPU__)

arch/sh/gen/flt_rounds.c
33:#if !defined(SOFTFLOAT)

arch/sh/gen/_setjmp.S
35: *	from: @(#)_setjmp.s	5.1 (Berkeley) 4/23/90
53:#if defined(__SH4__) && !defined(__SH4_NOFPU__)
54:	add	#(_JBLEN * 4), r4
70:	add	#((_JBLEN - 10) * 4), r4
101:#if defined(__SH4__) && !defined(__SH4_NOFPU__)

arch/sh/string/memset.S
56:	mov	#12,REG_TMP1		/* if (len >= 12) goto small; */
278:	tst	#3,REG_PTR		/* if (ptr & 3) {               */
281:	tst	#1,REG_PTR		/*   if (ptr & 1) {             */

arch/sh/string/memcpy.S
57:	tst	#1,r0		/* if ( src & 1 )          */
70:	tst	#2,r0		/*      (src & 2) {        */

arch/sh/sys/brk.S
35: *	from: @(#)brk.s	5.2 (Berkeley) 12/17/90

arch/sh/string/bcopy.S
56:	tst	#1,r0		/* if ( src & 1 )          */
69:	tst	#2,r0		/*      (src & 2) {        */
158:	tst	#1,r0		/* if ( src & 1 )          */
171:	tst	#2,r0		/*      (src & 2) {        */
173:	add	#-2,REG_SRC	/*        *--((unsigned short*)dst) = *--((unsigned short*)src); */

arch/sh/sys/Ovfork.S
35: *	from: @(#)Ovfork.s	5.1 (Berkeley) 4/23/90

arch/sh/string/memmove.S
58:	tst	#1,r0		/* if ( src & 1 )          */
71:	tst	#2,r0		/*      (src & 2) {        */
159:	tst	#1,r0		/* if ( src & 1 )          */
172:	tst	#2,r0		/*      (src & 2) {        */
174:	add	#-2,REG_SRC	/*        *--((unsigned short*)dst) = *--((unsigned short*)src); */

arch/sh/SYS.h
33: *	from: @(#)SYS.h	5.5 (Berkeley) 5/7/91
56:#define _HIDDEN(x)		_libc_##x
57:#define _HIDDEN_ALIAS(x,y)			\
60:#define _HIDDEN_FALIAS(x,y)			\
69:#define	END_STRONG(x)	SET_ENTRY_SIZE(x);		\
72:#define	END_WEAK(x)	END_STRONG(x); .weak x
75:#define	SYSENTRY(x)					\
78:#define	SYSENTRY_HIDDEN(x)				\
81:#define	__END_HIDDEN(x)					\
85:#define	__END(x)					\
88:#define SYSTRAP(x)					\
97:#define _SYSCALL_NOERROR(x,y)				\
100:#define _SYSCALL_HIDDEN_NOERROR(x,y)			\
113:#define _SYSCALL(x,y)					\
118:#define _SYSCALL_HIDDEN(x,y)				\
124:#define SYSCALL_NOERROR(x)				\
127:#define SYSCALL(x)					\
130:#define PSEUDO_NOERROR(x,y)				\
136:#define PSEUDO(x,y)					\
142:#define PSEUDO_HIDDEN(x,y)				\
148:#define RSYSCALL_NOERROR(x)		PSEUDO_NOERROR(x,x)
149:#define RSYSCALL(x)			PSEUDO(x,x)
150:#define RSYSCALL_HIDDEN(x)		PSEUDO_HIDDEN(x,x)
151:#define SYSCALL_END(x)			__END(x)
152:#define SYSCALL_END_HIDDEN(x)		__END_HIDDEN(x)

arch/sh/sys/syscall.S
35: *	from: @(#)syscall.s	5.1 (Berkeley) 4/23/90

arch/sh/sys/sigsuspend.S
35: *	from: @(#)sigsuspend.s	5.2 (Berkeley) 12/17/90

arch/sh/sys/sigpending.S
32: *	from: @(#)sigpending.s	5.1 (Berkeley) 7/1/90

arch/sh/sys/sbrk.S
35: *	from: @(#)sbrk.s	5.1 (Berkeley) 4/23/90

arch/sh/sys/sigprocmask.S
35: *	from: @(#)sigprocmask.s	5.2 (Berkeley) 12/17/90

include/cancel.h
31:#if defined(__LIBC__) && !defined(TCB_HAVE_MD_GET)
36:#define TIB_GET()	TCB_TO_TIB(_thread_cb.tc_tcb())
39:#define PREP_CANCEL_POINT(tib)						\
42:#define	ENTER_CANCEL_POINT_INNER(tib, can_cancel, delay)		\
53:#define	LEAVE_CANCEL_POINT_INNER(tib, can_cancel)			\
68:#define	ENTER_CANCEL_POINT(can_cancel)					\
74:#define	LEAVE_CANCEL_POINT(can_cancel)					\

include/namespace.h
138:#define	HIDDEN(x)		_libc_##x
139:#define	CANCEL(x)		_libc_##x##_cancel
140:#define	WRAP(x)			_libc_##x##_wrap
141:#define	HIDDEN_STRING(x)	"_libc_" __STRING(x)
142:#define	CANCEL_STRING(x)	"_libc_" __STRING(x) "_cancel"
143:#define	WRAP_STRING(x)		"_libc_" __STRING(x) "_wrap"
145:#define	PROTO_NORMAL(x)		__dso_hidden typeof(x) x asm(HIDDEN_STRING(x))
146:#define	PROTO_STD_DEPRECATED(x)	typeof(x) x __attribute__((deprecated))
147:#define	PROTO_DEPRECATED(x)	typeof(x) x __attribute__((deprecated, weak))
148:#define	PROTO_CANCEL(x)		__dso_hidden typeof(x) HIDDEN(x), \
150:#define	PROTO_WRAP(x)		PROTO_NORMAL(x), WRAP(x)
152:#define	DEF_STRONG(x)		__strong_alias(x, HIDDEN(x))
153:#define	DEF_WEAK(x)		__weak_alias(x, HIDDEN(x))
154:#define	DEF_CANCEL(x)		__weak_alias(x, CANCEL(x))
155:#define	DEF_WRAP(x)		__weak_alias(x, WRAP(x))
156:#define	DEF_SYS(x)		__strong_alias(_thread_sys_##x, HIDDEN(x))
158:#define	DEF_BUILTIN(x)		__asm("")
159:#define	BUILTIN			__attribute__((__visibility__("protected")))
161:#define	DEF_BUILTIN(x)		DEF_STRONG(x)
165:#define	MAKE_CLONE(dst, src)	__dso_hidden typeof(dst) HIDDEN(dst) \

gen/syslog_r.c
76:#define	TBUF_SIZE	(LOG_MAXLINE+1)
77:#define	FMT_SIZE	(1024+1)
103:#define	DEC()	\

include/thread_private.h
125:#define __THREAD_NAME(name)	__CONCAT(_thread_tagname_,name)
134:#define _THREAD_PRIVATE_KEY(name)					\
136:#define _THREAD_PRIVATE_MUTEX(name)					\
142:#define _THREAD_PRIVATE_MUTEX_LOCK(name)		do {} while (0)
143:#define _THREAD_PRIVATE_MUTEX_UNLOCK(name)		do {} while (0)
144:#define _THREAD_PRIVATE(keyname, storage, error)	&(storage)
145:#define _MUTEX_LOCK(mutex)				do {} while (0)
146:#define _MUTEX_UNLOCK(mutex)				do {} while (0)
147:#define _MUTEX_DESTROY(mutex)				do {} while (0)
148:#define _MALLOC_LOCK(n)					do {} while (0)
149:#define _MALLOC_UNLOCK(n)				do {} while (0)
150:#define _ATEXIT_LOCK()					do {} while (0)
151:#define _ATEXIT_UNLOCK()				do {} while (0)
152:#define _ATFORK_LOCK()					do {} while (0)
153:#define _ATFORK_UNLOCK()				do {} while (0)
154:#define _ARC4_LOCK()					do {} while (0)
155:#define _ARC4_UNLOCK()					do {} while (0)
158:#define _THREAD_PRIVATE_MUTEX_LOCK(name)				\
163:#define _THREAD_PRIVATE_MUTEX_UNLOCK(name)				\
168:#define _THREAD_PRIVATE(keyname, storage, error)			\
176:#define _MUTEX_LOCK(mutex)						\
181:#define _MUTEX_UNLOCK(mutex)						\
186:#define _MUTEX_DESTROY(mutex)						\
195:#define _MALLOC_LOCK(n)							\
200:#define _MALLOC_UNLOCK(n)						\
206:#define _ATEXIT_LOCK()							\
211:#define _ATEXIT_UNLOCK()						\
217:#define _ATFORK_LOCK()							\
222:#define _ATFORK_UNLOCK()						\
228:#define _ARC4_LOCK()							\
233:#define _ARC4_UNLOCK()							\
383:#define ENTER_DELAYED_CANCEL_POINT(tib, self)				\

include/mpool.h
32: *	@(#)mpool.h	8.4 (Berkeley) 11/2/95
48:#define	HASHKEY(pgno)	((pgno - 1 + HASHSIZE) % HASHSIZE)

gen/clock.c
38:#define	CONVTCK(r)	(r.tv_sec * CLOCKS_PER_SEC + \

gen/scandir.c
47:#define MAXIMUM(a, b)	(((a) > (b)) ? (a) : (b))
56:#define DIRSIZ(dp)							\

gen/fts.c
44:#define MAXIMUM(a, b)	(((a) > (b)) ? (a) : (b))
57:#define	ISDOT(a)	(a[0] == '.' && (!a[1] || (a[1] == '.' && !a[2])))
59:#define	CLR(opt)	(sp->fts_options &= ~(opt))
60:#define	ISSET(opt)	(sp->fts_options & (opt))
61:#define	SET(opt)	(sp->fts_options |= (opt))
63:#define	FCHDIR(sp, fd)	(!ISSET(FTS_NOCHDIR) && fchdir(fd))
250:#define	NAPPEND(p)							\
988:#define	ADJUST(p) {							\

gen/ispunct.3
57:.Dl !\(dq#$%&\(aq()*+,\-./:;<=>?@[\e]\(ha_\(ga{|}\(ti

gen/unvis.c
40:#define	S_META		2	/* metachar started (M) */
41:#define	S_META1		3	/* metachar more, regular char (-) */
42:#define	S_CTRL		4	/* control char started (^) */
46:#define	isoctal(c)	(((u_char)(c)) >= '0' && ((u_char)(c)) <= '7')

gen/getbsize.c
43:#define	KB	(1024)
44:#define	MB	(1024 * 1024)
45:#define	GB	(1024 * 1024 * 1024)

gen/login_cap.c
1000:#define tilde_valid(s, b, u, l, ip) \

gen/statvfs.3
31:.\"	@(#)statfs.2	8.3 (Berkeley) 2/11/94

gen/tree.c
62:#define RBE_LEFT(_rbe)		(_rbe)->rbt_left
63:#define RBE_RIGHT(_rbe)		(_rbe)->rbt_right
64:#define RBE_PARENT(_rbe)	(_rbe)->rbt_parent
65:#define RBE_COLOR(_rbe)		(_rbe)->rbt_color
67:#define RBH_ROOT(_rbt)		(_rbt)->rbt_root

gen/fts.3
30:.\"     @(#)fts.3	8.5 (Berkeley) 4/16/94

gen/disklabel.c
77:#define getnumdflt(field, dname, dflt) \
79:#define	getnum(field, dname) \

gen/getpwent.c
54:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))
959:#define	EXPAND(e)	e = t; while ((*t++ = *p++));

gen/shm_open.c
32:#define SHM_PATH_SIZE (5 + SHA256_DIGEST_STRING_LENGTH + 4)
35:#define OK_FLAGS	(O_CREAT | O_EXCL | O_TRUNC | O_CLOEXEC | O_NOFOLLOW)

gen/fabs.3
5:.\"	@(#)fabs.3	5.1 (Berkeley) 5/2/91
30:.\"     from: @(#)fabs.3	5.1 (Berkeley) 5/2/91

gen/getttyent.c
96:#define	scmp(e)	!strncmp(p, e, sizeof(e) - 1) && \
98:#define	vcmp(e)	!strncmp(p, e, sizeof(e) - 1) && p[sizeof(e) - 1] == '='

gen/sigsetops.c
30: *	@(#)sigsetops.c	8.1 (Berkeley) 6/4/93

gen/glob.c
114:#define	CHAR(c)		((Char)((c)&M_ASCII))
115:#define	META(c)		((Char)((c)|M_QUOTE))
116:#define	M_ALL		META('*')
117:#define	M_END		META(']')
118:#define	M_NOT		META('!')
119:#define	M_ONE		META('?')
120:#define	M_RNG		META('-')
121:#define	M_SET		META('[')
122:#define	M_CLASS		META(':')
123:#define	ismeta(c)	(((c)&M_QUOTE) != 0)

gen/toascii.3
31:.\"	@(#)toascii.3	8.1 (Berkeley) 6/4/93

gen/ldexp.c
22:#if (BYTE_ORDER == BIG_ENDIAN) || (defined(__arm__) && !defined(__VFP_FP__))
36:#if (BYTE_ORDER == LITTLE_ENDIAN) && !(defined(__arm__) && !defined(__VFP_FP__))
52:#define EXTRACT_WORDS(ix0,ix1,d)				\
62:#define GET_HIGH_WORD(i,d)					\
71:#define SET_HIGH_WORD(d,v)					\

gen/getcap.c
48:#define	ESC		('[' & 037)	/* ASCII ESC */
52:#define RECOK	(char)0
53:#define TCERR	(char)1
54:#define	SHADOW	(char)2

gen/getloadavg.c
37:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

gen/charclass.h
29:#define NCCLASSES	(sizeof(cclasses) / sizeof(cclasses[0]) - 1)

gen/fnmatch.c
96:#define	RANGE_ERROR	(-1)

gen/Makefile.inc
32:#	_setjmp() fabs() frexp() infinity ldexp() modf() __nan
33:#	setjmp() sigsetjmp() __tfork_thread()

gen/auth_subr.c
74:#define	MAXSPOOLSIZE	(8*1024)	/* Spool up to 8K of back info */
812:#define	Nargc	(sizeof(argv)/sizeof(argv[0]))

gen/nlist.c
45:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))
50:#define	ISLAST(p)	(p->n_un.n_name == 0 || p->n_un.n_name[0] == 0)

gen/vis.c
39:#define	isoctal(c)	(((u_char)(c)) >= '0' && ((u_char)(c)) <= '7')
40:#define	isvisible(c,flag)						\

gen/times.c
39:#define	CONVTCK(r)	(r.tv_sec * CLK_TCK + r.tv_usec / (1000000 / CLK_TCK))

gen/strtofflags.c
70:#define nmappings	(sizeof(mapping) / sizeof(mapping[0]))

gen/getnetgrent.c
47:#define _NG_STAR(s)	(((s) == NULL || *(s) == '\0') ? _ngstar : s)
48:#define _NG_EMPTY(s)	((s) == NULL ? "" : s)
49:#define _NG_ISSPACE(p)	(isspace((unsigned char) (p)) || (p) == '\n')

gen/fnmatch.3
32:.\"     @(#)fnmatch.3	8.3 (Berkeley) 4/28/95

gen/strtofflags.3
30:.\"     @(#)setmode.3	8.2 (Berkeley) 4/28/95

gen/pwcache.c
40:#define	MASK	(NCACHE - 1)		/* bits to store with */
41:#define	IDX(x, i)	((x & MASK) + i * NCACHE)

gen/pw_dup.c
30:#define PW_SIZE(name, size)				\
38:#define PW_COPY(name, size)				\

dlfcn/tib.c
24:#define ELF_ROUND(x,malign)	(((x) + (malign)-1) & ~((malign)-1))

dlfcn/dlfcn_stubs.c
119:#if defined(__amd64) || defined(__i386) || defined(__sparc64)

gen/setmode.c
144:#define	ADDCMD(a, b, c, d)						\
159:#define	STANDARD_BITS	(S_ISUID|S_ISGID|S_IRWXU|S_IRWXG|S_IRWXO)

sha1hl.c
36:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

sha512hl.c
36:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

string/wcscasecmp.3
33:.\"     @(#)strcasecmp.3	8.1 (Berkeley) 6/9/93

string/bcopy.c
42:#define	wsize	sizeof(word)
43:#define	wmask	(wsize - 1)
61:#define	TLOOP(s) if (t) TLOOP1(s)
62:#define	TLOOP1(s) do { s; } while (--t)

dlfcn/init.c
37:#define MAX(a,b)	(((a)>(b))?(a):(b))
40:# define TIB_ALIGN	MAX(__alignof__(struct tib), TIB_EXTRA_ALIGN)
42:# define TIB_ALIGN	__alignof__(struct tib)
163:#define ELF_ROUND(x,malign)	(((x) + (malign)-1) & ~((malign)-1))

string/wcscpy.c
34:#if defined(APIWARN)

string/memcpy.c
44:#define	wsize	sizeof(word)
45:#define	wmask	(wsize - 1)
80:#define	TLOOP(s) if (t) TLOOP1(s)
81:#define	TLOOP1(s) do { s; } while (--t)

string/strcasecmp.3
33:.\"     @(#)strcasecmp.3	8.1 (Berkeley) 6/9/93

string/strdup.3
30:.\"     @(#)strdup.3	8.1 (Berkeley) 6/9/93

string/wcsdup.3
31:.\"     @(#)strdup.3	8.1 (Berkeley) 6/9/93

string/strcat.c
34:#if defined(APIWARN)

string/stpcpy.c
34:#if defined(APIWARN)

string/memccpy.3
30:.\"     @(#)memccpy.3	8.1 (Berkeley) 6/9/93

string/strstr.c
56:#define MAX(a,b) ((a)>(b)?(a):(b))
57:#define MIN(a,b) ((a)<(b)?(a):(b))
59:#define BITOP(a,b,op) \

string/memmove.c
42:#define	wsize	sizeof(word)
43:#define	wmask	(wsize - 1)
61:#define	TLOOP(s) if (t) TLOOP1(s)
62:#define	TLOOP1(s) do { s; } while (--t)

string/strsep.3
33:.\"	@(#)strsep.3	8.1 (Berkeley) 6/9/93

string/Makefile.inc
18:#	bcmp() bcopy() bzero() ffs() index() memchr() memcmp() memset()
19:#	memcpy() memmove() memset() rindex() strcat() strchr()
20:#	strcmp() strcpy() strcspn() strlen() strlcat() strlcpy()
21:#	strncat() strncmp() strncpy() strpbrk() strrchr() strsep()
22:#	strspn() strstr() swab()

string/strcpy.c
34:#if defined(APIWARN)

string/strmode.3
30:.\"     @(#)strmode.3	8.3 (Berkeley) 7/28/94

string/wcscat.c
34:#if defined(APIWARN)

db/btree/bt_utils.c
42:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

db/btree/bt_overflow.c
42:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

db/btree/extern.h
31: *	@(#)extern.h	8.10 (Berkeley) 7/20/94

db/btree/bt_debug.c
63:#define	X(flag, name) \
105:#define	X(flag, name) \
153:#define	X(flag, name) \

db/mpool/README
2:#	@(#)README	8.1 (Berkeley) 6/4/93

db/man/recno.3
33:.\"	@(#)recno.3	8.5 (Berkeley) 8/18/94

db/man/hash.3
33:.\"	@(#)hash.3	8.6 (Berkeley) 8/18/94

db/man/btree.3
33:.\"	@(#)btree.3	8.4 (Berkeley) 8/18/94

db/man/dbopen.3
33:.\"	@(#)dbopen.3	8.5 (Berkeley) 1/2/94

db/db/db.c
48:#define	DB_FLAGS	(DB_LOCK | DB_SHMEM | DB_TXN)

db/README
2:#	@(#)README	8.27 (Berkeley) 9/1/94

db/hash/extern.h
31: *	@(#)extern.h    8.4 (Berkeley) 6/16/94

db/hash/hash_buf.c
66:#define MAXIMUM(a, b)	(((a) > (b)) ? (a) : (b))
71:#define BUF_REMOVE(B) { \
77:#define BUF_INSERT(B, P) { \
87:#define MRU_INSERT(B)	BUF_INSERT((B), &hashp->bufhead)
88:#define LRU_INSERT(B)	BUF_INSERT((B), LRU)

db/hash/hash_bigkey.c
67:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

db/hash/page.h
34: *	@(#)page.h	8.2 (Berkeley) 5/31/94
74:#define	PAIRSIZE(K,D)	(2*sizeof(u_int16_t) + (K)->size + (D)->size)
75:#define BIGOVERHEAD	(4*sizeof(u_int16_t))
76:#define KEYSIZE(K)	(4*sizeof(u_int16_t) + (K)->size);
77:#define OVFLSIZE	(2*sizeof(u_int16_t))
78:#define FREESPACE(P)	((P)[(P)[0]+1])
79:#define	OFFSET(P)	((P)[(P)[0]+2])
80:#define PAIRFITS(P,K,D) \
83:#define PAGE_META(N)	(((N)+3) * sizeof(u_int16_t))

db/btree/btree.h
34: *	@(#)btree.h	8.11 (Berkeley) 8/17/94
38:#define	F_SET(p, f)	(p)->flags |= (f)
39:#define	F_CLR(p, f)	(p)->flags &= ~(f)
40:#define	F_ISSET(p, f)	((p)->flags & (f))
44:#define	DEFMINKEYPAGE	(2)		/* Minimum keys per page */
45:#define	MINCACHE	(5)		/* Minimum cached pages */
46:#define	MINPSIZE	(512)		/* Minimum page size */
88:#define	NEXTINDEX(p)	(((p)->lower - BTDATAOFF) / sizeof(indx_t))
106:#define	LALIGN(n)	(((n) + sizeof(pgno_t) - 1) & ~(sizeof(pgno_t) - 1))
107:#define	NOVFLSIZE	(sizeof(pgno_t) + sizeof(u_int32_t))
128:#define	GETBINTERNAL(pg, indx)						\
132:#define NBINTERNAL(len)							\
136:#define	WR_BINTERNAL(p, size, pgno, flags) {				\
155:#define	GETRINTERNAL(pg, indx)						\
163:#define	WR_RINTERNAL(p, nrecs, pgno) {					\
178:#define	GETBLEAF(pg, indx)						\
182:#define NBLEAF(p)	NBLEAFDBT((p)->ksize, (p)->dsize)
185:#define NBLEAFDBT(ksize, dsize)						\
190:#define	WR_BLEAF(p, key, data, flags) {					\
210:#define	GETRLEAF(pg, indx)						\
214:#define NRLEAF(p)	NRLEAFDBT((p)->dsize)
217:#define	NRLEAFDBT(dsize)						\
221:#define	WR_RLEAF(p, data, flags) {					\
297:#define	SAVEMETA	(B_NODUPS | R_RECNO)
312:#define	BT_PUSH(t, p, i) {						\
317:#define	BT_POP(t)	(t->bt_sp == t->bt_stack ? NULL : --t->bt_sp)
318:#define	BT_CLR(t)	(t->bt_sp = t->bt_stack)

db/hash/hash.c
52:#define MAXIMUM(a, b)	(((a) > (b)) ? (a) : (b))
74:#define MOD(x, y)		((x) & ((y) - 1))
76:#define RETURN_ERROR(ERR, LOC)	{ save_errno = ERR; goto LOC; }
79:#define	SUCCESS	 (0)
80:#define	ERROR	(-1)
81:#define	ABNORMAL (1)

db/hash/hash_page.c
76:#define	PAGE_INIT(P) { \
601:#define BYTE_MASK	((1 << INT_BYTE_SHIFT) -1)

db/hash/hash.h
34: *	@(#)hash.h	8.3 (Berkeley) 5/31/94
58:#define IS_BUCKET(X)	((X) & BUF_BUCKET)
127:#define DEF_BUCKET_SHIFT	12		/* log2(BUCKET) */
129:#define DEF_SEGSIZE_SHIFT	8		/* log2(SEGSIZE)	 */
139:#define ALL_SET			((u_int32_t)0xFFFFFFFF)
142:#define PTROF(X)	((BUFHEAD *)((ptrdiff_t)(X)&~0x3))
143:#define ISMOD(X)	((u_int32_t)(ptrdiff_t)(X)&0x1)
144:#define DOMOD(X)	((X) = (char *)((ptrdiff_t)(X)|0x1))
145:#define ISDISK(X)	((u_int32_t)(ptrdiff_t)(X)&0x2)
146:#define DODISK(X)	((X) = (char *)((ptrdiff_t)(X)|0x2))
151:#define CLRBIT(A, N)	((A)[(N)/BITS_PER_MAP] &= ~(1<<((N)%BITS_PER_MAP)))
152:#define SETBIT(A, N)	((A)[(N)/BITS_PER_MAP] |= (1<<((N)%BITS_PER_MAP)))
153:#define ISSET(A, N)	((A)[(N)/BITS_PER_MAP] & (1<<((N)%BITS_PER_MAP)))
166:#define SPLITNUM(N)	(((u_int32_t)(N)) >> SPLITSHIFT)
167:#define OPAGENUM(N)	((N) & SPLITMASK)
168:#define	OADDR_OF(S,O)	((u_int32_t)((u_int32_t)(S) << SPLITSHIFT) + (O))
170:#define BUCKET_TO_PAGE(B) \
172:#define OADDR_TO_PAGE(B) 	\

db/recno/extern.h
31: *	@(#)extern.h	8.3 (Berkeley) 6/4/94

db/hash/hash_func.c
46:#define HASH4a   h = (h << 5) - h + *k++;
47:#define HASH4b   h = (h << 5) + h + *k++;

db/recno/recno.h
31: *	@(#)recno.h	8.1 (Berkeley) 6/4/93

uuid/uuid_compare.c
37:#define DIFF_RETURN(a, b, field)	do {			\

rpc/svc_udp.c
50:#define rpc_buffer(xprt) ((xprt)->xp_p1)
51:#define MAX(a, b)     ((a > b) ? a : b)
82:#define	su_data(xprt)	((struct svcudp_data *)(xprt->xp_p2))
318:#define CACHE_LOC(transp, xid)	\
427:#	define EQADDR(a1, a2)	(memcmp(&a1, &a2, sizeof(a1)) == 0)

rpc/auth_unix.c
82:#define	AUTH_PRIVATE(auth)	((struct audata *)auth->ah_private)

rpc/xdr.c
52:#define XDR_FALSE	((long) 0)
53:#define XDR_TRUE	((long) 1)
54:#define LASTUNSIGNED	((u_int) 0-1)

rpc/xdr_float.c
87:#if (BYTE_ORDER == BIG_ENDIAN) || (defined(__arm__) && !defined(__VFP_FP__))
106:#if (BYTE_ORDER == BIG_ENDIAN) || (defined(__arm__) && !defined(__VFP_FP__))

rpc/README
165:  #define TVOID	FTN		/* function returning UNDEF (for void) */
172:! #define TNULL	INCREF(MOETY)	/* pointer to MOETY -- impossible type */
173:  #define TVOID	FTN		/* function returning UNDEF (for void) */

rpc/xdr_rec.c
108:#define LAST_FRAG ((u_int32_t)(1U << 31))

rpc/svc.c
54:#define max(a, b) (a > b ? a : b)

gmon/mcount.c
90:#if (HASHFRACTION & (HASHFRACTION - 1)) == 0

gmon/gmon.c
49:#define ERR(s) write(STDERR_FILENO, s, sizeof(s))

gdtoa/gdtoa.h
50:#define ANSI(x) ()
53:#define ANSI(x) x
155:#define __strtopd(s,se,x) strtord(s,se,1,x)
156:#define __strtopdd(s,se,x) strtordd(s,se,1,x)
157:#define __strtopf(s,se,x) strtorf(s,se,1,x)
158:#define __strtopQ(s,se,x) strtorQ(s,se,1,x)
159:#define __strtopx(s,se,x) strtorx(s,se,1,x)
160:#define __strtopxL(s,se,x) strtorxL(s,se,1,x)

gdtoa/ldtoa.c
37:#if (LDBL_MANT_DIG > DBL_MANT_DIG)
109:#else   /* (LDBL_MANT_DIG == DBL_MANT_DIG) */
124:#endif  /* (LDBL_MANT_DIG == DBL_MANT_DIG) */

gdtoa/hdtoa.c
40:#define	DBL_ADJ		(DBL_MAX_EXP - 2 + ((DBL_MANT_DIG - 1) % 4))
41:#define	LDBL_ADJ	(LDBL_MAX_EXP - 2 + ((LDBL_MANT_DIG - 1) % 4))
215:#if (LDBL_MANT_DIG > DBL_MANT_DIG)
325:#else	/* (LDBL_MANT_DIG == DBL_MANT_DIG) */
335:#endif	/* (LDBL_MANT_DIG == DBL_MANT_DIG) */

gdtoa/hd_init.c
51:#define USC (unsigned char *)

gdtoa/dtoa.c
162:#if defined(IEEE_Arith) + defined(VAX)

gdtoa/misc.c
39:#define PRIVATE_mem ((PRIVATE_MEM+sizeof(double)-1)/sizeof(double))
663:#define d0 word0(&d)
664:#define d1 word1(&d)
736:#define d0 word0(&d)
737:#define d1 word1(&d)

stdio/fwrite.c
41:#define MUL_NO_OVERFLOW	(1UL << (sizeof(size_t) * 4))

stdio/fgetws.3
36:.\"     @(#)fgets.3	8.1 (Berkeley) 6/4/93

stdio/open_memstream.c
27:#define	MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

stdio/fileext.h
40:#define _EXT(fp) ((struct __sfileext *)((fp)->_ext._base))
41:#define _UB(fp) _EXT(fp)->_ub
43:#define _FILEEXT_INIT(fp) \
50:#define _FILEEXT_SETUP(f, fext) \

stdio/ungetwc.3
36:.\"     @(#)ungetc.3	8.1 (Berkeley) 6/4/93

stdio/fread.c
40:#define MUL_NO_OVERFLOW	(1UL << (sizeof(size_t) * 4))

stdio/local.h
74:#define	cantwrite(fp) \
82:#define	HASUB(fp) (_UB(fp)._base != NULL)
83:#define	FREEUB(fp) { \
92:#define	HASLB(fp) ((fp)->_lb._base != NULL)
93:#define	FREELB(fp) { \
98:#define FLOCKFILE(fp)							\
103:#define FUNLOCKFILE(fp)							\

stdio/remove.3
34:.\"	@(#)remove.3	8.1 (Berkeley) 6/4/93

stdio/fputws.3
36:.\"     @(#)fputs.3	8.1 (Berkeley) 6/4/93

stdio/getdelim.c
91:#define powerof2(x) ((((x)-1)&(x))==0)

stdio/fseek.c
42:#define	POS_ERR	(-(fpos_t)1)

stdio/mktemp.c
35:#define NUM_CHARS	(sizeof(TEMPCHARS) - 1)
38:#define MKOTEMP_FLAGS	(O_APPEND | O_CLOEXEC | O_DSYNC | O_RSYNC | O_SYNC)
41:#define nitems(_a)	(sizeof((_a)) / sizeof((_a)[0]))

stdio/wscanf.3
34:.\"     @(#)scanf.3	8.2 (Berkeley) 12/11/93

stdio/printf.3
34:.\"     @(#)printf.3	8.1 (Berkeley) 6/4/93

stdio/vfscanf.c
58:#define LLONG		0x00010	/* ll: long long (+ deprecated q: quad) */
59:#define	POINTER		0x00020	/* p: void * (as hex) */
60:#define	SIZEINT		0x00040	/* z: (signed) size_t */
72:#define	SIGNOK		0x01000	/* +/- is (still) legal */
76:#define	DPTOK		0x08000	/* (float) decimal point is still legal */
77:#define	EXPOK		0x10000	/* (float) exponent (e+3, etc) still legal */
79:#define	PFXOK		0x08000	/* 0x prefix is (still) legal */

stdio/open_wmemstream.c
28:#define	MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

stdio/findfp.c
48:#define	std(flags, file) \

stdio/vfwscanf.c
59:#define LLONG		0x00010	/* ll: long long (+ deprecated q: quad) */
60:#define	POINTER		0x00020	/* p: void * (as hex) */
61:#define	SIZEINT		0x00040	/* z: (signed) size_t */
73:#define	SIGNOK		0x01000	/* +/- is (still) legal */
77:#define	DPTOK		0x08000	/* (float) decimal point is still legal */
78:#define	EXPOK		0x10000	/* (float) exponent (e+3, etc) still legal */
80:#define	PFXOK		0x08000	/* 0x prefix is (still) legal */
95:#define	INCCL(_c)	\

stdio/vsprintf.c
39:#if defined(APIWARN)

stdio/wprintf.3
34:.\"     @(#)printf.3	8.1 (Berkeley) 6/4/93

stdio/wcio.h
48:#define WCIO_GET(fp) \
51:#define _SET_ORIENTATION(fp, mode) \
61:#define WCIO_FREE(fp) \
70:#define WCIO_FREEUB(fp) \
78:#define WCIO_INIT(fp) \

stdio/getwc.3
36:.\"     @(#)getc.3	8.1 (Berkeley) 6/4/93

stdio/fvwrite.c
66:#define	MIN(a, b) ((a) < (b) ? (a) : (b))
67:#define	COPY(n)	  (void)memcpy(fp->_p, p, n)
73:#define GETIOV(extra_work) \

stdio/sprintf.c
40:#if defined(APIWARN)

stdio/putwc.3
36:.\"     @(#)putc.3	8.1 (Berkeley) 6/4/93

Makefile
3:# The YP functions are always in libc. To choose that getpwent() and friends

md5hl.c
36:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

stdio/vfwprintf.c
259:#define	to_digit(c)	((c) - '0')
260:#define is_digit(c)	((unsigned)to_digit(c) <= 9)
261:#define	to_char(n)	((wchar_t)((n) + '0'))
272:#define	ZEROPAD		0x0080		/* zero (as opposed to blank) pad */
274:#define PTRINT		0x0200		/* (unsigned) ptrdiff_t */
275:#define SIZEINT		0x0400		/* (signed) size_t */
277:#define MAXINT		0x1000		/* largest integer size (intmax_t) */
355:#define	PRINT(ptr, len)	do {	\
361:#define	PAD(howmany, with) do { \
370:#define	PRINTANDPAD(p, ep, len, with) do {	\
383:#define	SARG() \
392:#define	UARG() \
405:#define APPEND_DIGIT(val, dig) do { \
418:#define GETASTER(val) \
448:#define GETARG(type) \
1153:#define ADDTYPE(type) \
1159:#define	ADDSARG() \
1168:#define	ADDUARG() \
1180:#define ADDASTER() \

quad/quad.h
77:#define	QUAD_BITS	(sizeof(quad_t) * CHAR_BIT)
78:#define	INT_BITS	(sizeof(int) * CHAR_BIT)
79:#define	HALF_BITS	(sizeof(int) * CHAR_BIT / 2)
90:#define	HHALF(x)	((u_int)(x) >> HALF_BITS)
91:#define	LHALF(x)	((u_int)(x) & (((int)1 << HALF_BITS) - 1))
92:#define	LHUP(x)		((u_int)(x) << HALF_BITS)

gdtoa/gdtoaimp.h
90: * #define VAX for VAX-style floating-point arithmetic (D_floating).
119: * #define MALLOC your_malloc, where your_malloc(n) acts like malloc(n)
128: * #define Omit_Private_Memory to omit logic (added Jan. 1998) for making
153: *	Unless GDTOA_NON_PEDANTIC_NANCHECK is #defined, input "NaN(...)"
158: *	#define) two locks, acquired by ACQUIRE_DTOA_LOCK(n) and freed
189:#define Bug(x) {fprintf(stderr, "%s\n", x); exit(1);}
273:#if defined(IEEE_8087) + defined(IEEE_MC68k) + defined(VAX) + defined(IBM) != 1
280:#define word0(x) (x)->L[1]
281:#define word1(x) (x)->L[0]
283:#define word0(x) (x)->L[0]
284:#define word1(x) (x)->L[1]
286:#define dval(x) (x)->d
290: * #define Storeinc(a,b,c) (*a++ = b << 16 | c & 0xffff)
292:#if defined(IEEE_8087) + defined(VAX)
293:#define Storeinc(a,b,c) (((unsigned short *)a)[1] = (unsigned short)b, \
296:#define Storeinc(a,b,c) (((unsigned short *)a)[0] = (unsigned short)b, \
314:#define Emin (-1022)
379:#define Emin (-127)
409:#define rounded_product(a,b) a = rnd_prod(a, b)
410:#define rounded_quotient(a,b) a = rnd_quot(a, b)
417:#define rounded_product(a,b) a *= b
418:#define rounded_quotient(a,b) a /= b
421:#define Big0 (Frac_mask1 | Exp_msk1*(DBL_MAX_EXP+Bias-1))
462:#define ACQUIRE_DTOA_LOCK(n)	/*nothing*/
463:#define FREE_DTOA_LOCK(n)	/*nothing*/
466:#define ACQUIRE_DTOA_LOCK(n)	_MUTEX_LOCK(&__dtoa_locks[n])
467:#define FREE_DTOA_LOCK(n)	_MUTEX_UNLOCK(&__dtoa_locks[n])
486:#define Bcopy(x,y) memcpy_D2A(&x->sign,&y->sign,y->wds*sizeof(ULong) + 2*sizeof(int))
488:#define Bcopy(x,y) memcpy(&x->sign,&y->sign,y->wds*sizeof(ULong) + 2*sizeof(int))
542:#define hi0bits(x) __hi0bits_D2A((ULong)(x))

quad/fixunssfdi.c
37:#define	ONE_FOURTH	((int)1 << (INT_BITS - 2))
38:#define	ONE_HALF	(ONE_FOURTH * 2.0)
39:#define	ONE		(ONE_FOURTH * 4.0)

stdio/vfprintf.c
237:#define	to_digit(c)	((c) - '0')
238:#define is_digit(c)	((unsigned)to_digit(c) <= 9)
239:#define	to_char(n)	((n) + '0')
250:#define	ZEROPAD		0x0080		/* zero (as opposed to blank) pad */
252:#define PTRINT		0x0200		/* (unsigned) ptrdiff_t */
253:#define SIZEINT		0x0400		/* (signed) size_t */
255:#define MAXINT		0x1000		/* largest integer size (intmax_t) */
350:#define	PRINT(ptr, len) do { \
361:#define	PAD(howmany, with) do { \
370:#define	PRINTANDPAD(p, ep, len, with) do {	\
378:#define	FLUSH() do { \
389:#define	SARG() \
398:#define	UARG() \
411:#define APPEND_DIGIT(val, dig) do { \
424:#define GETASTER(val) \
454:#define GETARG(type) \
1153:#define ADDTYPE(type) \
1159:#define	ADDSARG() \
1168:#define	ADDUARG() \
1180:#define ADDASTER() \

quad/fixunsdfdi.c
37:#define	ONE_FOURTH	((int)1 << (INT_BITS - 2))
38:#define	ONE_HALF	(ONE_FOURTH * 2.0)
39:#define	ONE		(ONE_FOURTH * 4.0)

quad/qdivrem.c
42:#define	B	((int)1 << HALF_BITS)	/* digit base */
45:#define	COMBINE(a, b) (((u_int)(a) << HALF_BITS) | (b))

sys/setpgid.2
31:.\"     @(#)setpgid.2	8.1 (Berkeley) 6/4/93

sys/open.2
31:.\"     @(#)open.2	8.2 (Berkeley) 11/16/93

sys/getitimer.2
31:.\"     @(#)getitimer.2	8.2 (Berkeley) 12/11/93

sys/wait.2
31:.\"     @(#)wait.2	8.2 (Berkeley) 4/19/94
91:#define WAIT_ANY        (-1)    /* any process */

sys/link.2
31:.\"     @(#)link.2	8.3 (Berkeley) 1/12/94

sys/rename.2
31:.\"     @(#)rename.2	8.1 (Berkeley) 6/4/93

sys/sigaltstack.2
31:.\"     @(#)sigaltstack.2	8.1 (Berkeley) 6/4/93

sys/select.2
31:.\"     @(#)select.2	8.2 (Berkeley) 3/25/94

sys/shutdown.2
31:.\"     @(#)shutdown.2	8.1 (Berkeley) 6/4/93

sys/flock.2
31:.\"     @(#)flock.2	8.2 (Berkeley) 12/11/93

sys/fsync.2
31:.\"     @(#)fsync.2	8.1 (Berkeley) 6/4/93

sys/fork.2
31:.\"	@(#)fork.2	8.1 (Berkeley) 6/4/93

sys/acct.2
31:.\"     @(#)acct.2	8.1 (Berkeley) 6/4/93

sys/sigprocmask.2
31:.\"	@(#)sigprocmask.2	8.1 (Berkeley) 6/4/93

sys/rmdir.2
31:.\"     @(#)rmdir.2	8.1 (Berkeley) 6/4/93

sys/shmctl.2
90:	u_short		seq;	/* sequence # (to generate unique msg/sem/shm id) */

sys/dup.2
31:.\"     @(#)dup.2	8.1 (Berkeley) 6/4/93

sys/mkfifo.2
31:.\"	@(#)mkfifo.2	8.1 (Berkeley) 6/4/93

sys/mkdir.2
31:.\"     @(#)mkdir.2	8.2 (Berkeley) 12/11/93

sys/fcntl.2
31:.\"     @(#)fcntl.2	8.2 (Berkeley) 1/12/94

sys/write.2
31:.\"     @(#)write.2	8.5 (Berkeley) 4/2/94

sys/brk.2
31:.\"     @(#)brk.2	8.2 (Berkeley) 12/11/93

sys/getsockname.2
31:.\"     @(#)getsockname.2	8.1 (Berkeley) 6/4/93

sys/utimes.2
31:.\"     @(#)utimes.2	8.1 (Berkeley) 6/4/93

sys/getpgrp.2
31:.\"     @(#)getpgrp.2	8.1 (Berkeley) 6/4/93

sys/chflags.2
31:.\"	@(#)chflags.2	8.1 (Berkeley) 6/9/93

sys/semctl.2
100:	u_short seq;		/* sequence # (to generate unique msg/sem/shm id) */

sys/nfssvc.2
31:.\"	@(#)nfssvc.2	8.1 (Berkeley) 6/9/93

sys/sigpending.2
34:.\"	@(#)sigpending.2	8.3 (Berkeley) 1/12/94

sys/unlink.2
31:.\"     @(#)unlink.2	8.1 (Berkeley) 6/4/93

sys/getrusage.2
30:.\"     @(#)getrusage.2	8.1 (Berkeley) 6/4/93

sys/execve.2
31:.\"     @(#)execve.2	8.3 (Berkeley) 1/24/94

sys/madvise.2
31:.\"	@(#)madvise.2	8.1 (Berkeley) 6/9/93

sys/truncate.2
31:.\"     @(#)truncate.2	8.1 (Berkeley) 6/4/93

sys/close.2
31:.\"     @(#)close.2	8.2 (Berkeley) 4/19/94

sys/kill.2
31:.\"     @(#)kill.2	8.3 (Berkeley) 4/19/94

sys/ktrace.2
31:.\"     @(#)ktrace.2	8.1 (Berkeley) 6/4/93

sys/getpriority.2
31:.\"     @(#)getpriority.2	8.1 (Berkeley) 6/4/93

sys/getgid.2
31:.\"     @(#)getgid.2	8.1 (Berkeley) 6/4/93

sys/getrlimit.2
31:.\"     @(#)getrlimit.2	8.1 (Berkeley) 6/4/93

sys/umask.2
31:.\"     @(#)umask.2	8.1 (Berkeley) 6/4/93

sys/mincore.2
31:.\"	@(#)mincore.2	8.1 (Berkeley) 6/9/93

sys/chown.2
31:.\"     @(#)chown.2	8.4 (Berkeley) 4/19/94

sys/revoke.2
34:.\"     @(#)revoke.2	8.1 (Berkeley) 6/4/93

sys/accept.2
31:.\"     @(#)accept.2	8.2 (Berkeley) 12/11/93

sys/listen.2
31:.\"     @(#)listen.2	8.2 (Berkeley) 12/11/93

sys/read.2
31:.\"     @(#)read.2	8.4 (Berkeley) 2/26/94

sys/mmap.2
31:.\"	@(#)mmap.2	8.1 (Berkeley) 6/4/93

sys/getpid.2
31:.\"     @(#)getpid.2	8.1 (Berkeley) 6/4/93

sys/socket.2
31:.\"     @(#)socket.2	8.1 (Berkeley) 6/4/93

sys/lseek.2
31:.\"     @(#)lseek.2	8.3 (Berkeley) 4/19/94

sys/getthrid.2
31:.\"     @(#)getpid.2	8.1 (Berkeley) 6/4/93

sys/stack_protector.c
41: * XXX would this work? #if defined(__PIC__) && !defined(__PIE__)

sys/pathconf.2
31:.\"	@(#)pathconf.2	8.1 (Berkeley) 6/4/93

sys/setgroups.2
31:.\"     @(#)setgroups.2	8.2 (Berkeley) 4/16/94

sys/sync.2
31:.\"     @(#)sync.2	8.1 (Berkeley) 6/4/93

sys/chdir.2
31:.\"     @(#)chdir.2	8.2 (Berkeley) 12/11/93

sys/minherit.2
30:.\"	@(#)minherit.2	8.1 (Berkeley) 6/9/93

sys/getsockopt.2
31:.\"     @(#)getsockopt.2	8.3 (Berkeley) 4/19/94

sys/ioctl.2
31:.\"     @(#)ioctl.2	8.2 (Berkeley) 12/11/93

sys/mprotect.2
31:.\"	@(#)mprotect.2	8.1 (Berkeley) 6/9/93

sys/chroot.2
31:.\"     @(#)chroot.2	8.1 (Berkeley) 6/4/93

sys/profil.2
34:.\"	@(#)profil.2	8.1 (Berkeley) 6/4/93

sys/recv.2
31:.\"     @(#)recv.2	8.3 (Berkeley) 2/21/94

sys/intro.2
31:.\"     @(#)intro.2	8.3 (Berkeley) 12/11/93

sys/munmap.2
31:.\"	@(#)munmap.2	8.2 (Berkeley) 4/15/94

sys/chmod.2
31:.\"     @(#)chmod.2	8.1 (Berkeley) 6/4/93

sys/statfs.2
31:.\"	@(#)statfs.2	8.3 (Berkeley) 2/11/94

sys/readlink.2
31:.\"     @(#)readlink.2	8.1 (Berkeley) 6/4/93

sys/getfsstat.2
31:.\"	@(#)getfsstat.2	8.1 (Berkeley) 6/9/93

sys/mount.2
31:.\"     @(#)mount.2	8.2 (Berkeley) 12/11/93

sys/vfork.2
31:.\"     @(#)vfork.2	8.1 (Berkeley) 6/4/93

sys/send.2
31:.\"     @(#)send.2	8.2 (Berkeley) 2/21/94

sys/getfh.2
31:.\"	@(#)getfh.2	8.1 (Berkeley) 6/9/93

sys/thrkill.2
31:.\"     @(#)kill.2	8.3 (Berkeley) 4/19/94

sys/sysarch.2
31:.\"     from: @(#)syscall.2	6.3 (Berkeley) 3/10/91

sys/nanosleep.2
31:.\"     @(#)sleep.3	8.1 (Berkeley) 6/4/93

sys/setsid.2
31:.\"	@(#)setsid.2	8.1 (Berkeley) 6/4/93

sys/_exit.2
31:.\"     @(#)_exit.2	8.1 (Berkeley) 6/4/93

sys/socketpair.2
31:.\"     @(#)socketpair.2	8.1 (Berkeley) 6/4/93

sys/getdents.2
31:.\"	@(#)getdirentries.2	8.1 (Berkeley) 6/9/93

sys/pipe.2
31:.\"     @(#)pipe.2	8.1 (Berkeley) 6/4/93

sys/mlock.2
31:.\"	@(#)mlock.2	8.2 (Berkeley) 12/11/93

sys/gettimeofday.2
30:.\"     @(#)gettimeofday.2	8.2 (Berkeley) 5/26/95

sys/syscall.2
31:.\"     @(#)syscall.2	8.1 (Berkeley) 6/16/93

sys/symlink.2
31:.\"     @(#)symlink.2	8.1 (Berkeley) 6/4/93

sys/getgroups.2
31:.\"     @(#)getgroups.2	8.2 (Berkeley) 4/16/94

sys/sigreturn.2
31:.\"     @(#)sigreturn.2	8.1 (Berkeley) 6/4/93

sys/getpeername.2
31:.\"     @(#)getpeername.2	8.1 (Berkeley) 6/4/93

sys/mknod.2
31:.\"     @(#)mknod.2	8.1 (Berkeley) 6/4/93

sys/msgctl.2
86:	u_short	seq;	/* sequence # (to generate unique id) */

sys/setreuid.2
30:.\"      @(#)setreuid.2	8.2 (Berkeley) 4/16/94

sys/getuid.2
31:.\"     @(#)getuid.2	8.1 (Berkeley) 6/4/93

sys/bind.2
31:.\"     @(#)bind.2	8.1 (Berkeley) 6/4/93

sys/getlogin.2
31:.\"	@(#)getlogin.2	8.1 (Berkeley) 6/9/93

sys/stat.2
30:.\"     @(#)stat.2	8.3 (Berkeley) 4/19/94
250:#define S_IFIFO  0010000  /* named pipe (fifo) */

sys/adjtime.2
31:.\"     @(#)adjtime.2	8.1 (Berkeley) 6/4/93

sys/Makefile.inc
3:#	@(#)Makefile.inc	8.1 (Berkeley) 6/17/93
106:# than its matching SYS_* symbol.  E.g., _exit() --> SYS_exit

sys/setregid.2
30:.\"     @(#)setregid.2	8.2 (Berkeley) 4/16/94

sys/connect.2
31:.\"     @(#)connect.2	8.1 (Berkeley) 6/4/93

sys/sigaction.2
31:.\"	@(#)sigaction.2	8.2 (Berkeley) 4/3/94

sys/sigsuspend.2
31:.\"	@(#)sigsuspend.2	8.1 (Berkeley) 6/4/93

sys/access.2
31:.\"     @(#)access.2	8.2 (Berkeley) 4/1/94

sys/quotactl.2
34:.\"	@(#)quotactl.2	8.1 (Berkeley) 6/4/93

sys/setuid.2
31:.\"     @(#)setuid.2	8.1 (Berkeley) 6/4/93

sys/reboot.2
31:.\"     @(#)reboot.2	8.1 (Berkeley) 6/4/93

sys/msync.2
31:.\"	@(#)msync.2	8.1 (Berkeley) 6/9/93

sha224hl.c
36:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

locale/_wcstol.h
33: * @(#)strtol.c	8.1 (Berkeley) 6/4/93

locale/rune.h
35: *	@(#)rune.h	8.1 (Berkeley) 6/27/93
46:#define	_LOCALE_NONE	(locale_t)0
47:#define	_LOCALE_C	(locale_t)1
48:#define	_LOCALE_UTF8	(locale_t)2

locale/iswalnum.3
35:.\"     @(#)isalnum.3	5.2 (Berkeley) 6/29/91

locale/rune.c
74:#define SAFE_ADD(x, y)			\

locale/setlocale.3
34:.\"	@(#)setlocale.3	8.1 (Berkeley) 6/9/93

locale/towlower.3
35:.\"	@(#)tolower.3	5.2 (Berkeley) 6/29/91

locale/_wcstoul.h
33: * @(#)strtoul.c	8.1 (Berkeley) 6/4/93

locale/runetype.h
37: *	@(#)runetype.h	8.1 (Berkeley) 6/2/93
47:#define	_CACHED_RUNES		(1 << 8)	/* Must be a power of 2 */
48:#define _RUNE_ISCACHED(c)	((c)>=0 && (c)<_CACHED_RUNES)
50:#define _DEFAULT_INVALID_RUNE	((rune_t)-3)
213:#define	_RUNE_MODULE_1(type)	"RuneModule10." type

hash/siphash.c
153:#define SIP_ROTL(x, b) ((x) << (b)) | ( (x) >> (64 - (b)))

Makefile.inc
18:# Include link-time warnings about unsafe API uses (ie. strcpy)

hash/helper.c
36:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

hash/sha1.c
21:#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))
28:# define blk0(i) (block->l[i] = (rol(block->l[i],24)&0xFF00FF00) \
31:# define blk0(i) block->l[i]
33:#define blk(i) (block->l[i&15] = rol(block->l[(i+13)&15]^block->l[(i+8)&15] \
39:#define R0(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk0(i)+0x5A827999+rol(v,5);w=rol(w,30);
40:#define R1(v,w,x,y,z,i) z+=((w&(x^y))^y)+blk(i)+0x5A827999+rol(v,5);w=rol(w,30);
41:#define R2(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol(v,5);w=rol(w,30);
42:#define R3(v,w,x,y,z,i) z+=(((w|x)&y)|(w&x))+blk(i)+0x8F1BBCDC+rol(v,5);w=rol(w,30);
43:#define R4(v,w,x,y,z,i) z+=(w^x^y)+blk(i)+0xCA62C1D6+rol(v,5);w=rol(w,30);

hash/md5.c
24:#define PUT_64BIT_LE(cp, value) do {					\
34:#define PUT_32BIT_LE(cp, value) do {					\
141:/* #define F1(x, y, z) (x & y | ~x & z) */
142:#define F1(x, y, z) (z ^ (x & (y ^ z)))
143:#define F2(x, y, z) F1(z, x, y)
144:#define F3(x, y, z) (x ^ y ^ z)
145:#define F4(x, y, z) (y ^ (x | ~z))
148:#define MD5STEP(f, w, x, y, z, data, s) \

asr/asr_debug.c
276:#define PRINTOPT(flag, n) if (o & (flag)) { fprintf(f, " " n); o &= ~(flag); }
307:#define CASE(n) case n: return #n

hash/rmd160.c
34:#define PUT_64BIT_LE(cp, value) do {                                    \
44:#define PUT_32BIT_LE(cp, value) do {                                    \
69:#define ROL(n, x) (((x) << (n)) | ((x) >> (32-(n))))
71:#define F0(x, y, z) ((x) ^ (y) ^ (z))
72:#define F1(x, y, z) (((x) & (y)) | ((~x) & (z)))
73:#define F2(x, y, z) (((x) | (~y)) ^ (z))
74:#define F3(x, y, z) (((x) & (z)) | ((y) & (~z)))
75:#define F4(x, y, z) ((x) ^ ((y) | (~z)))
77:#define R(a, b, c, d, e, Fj, Kj, sj, rj)                                \
83:#define X(i)	x[i]

asr/asr_private.h
20:#define QR_MASK		(0x1 << 15)
21:#define OPCODE_MASK	(0xf << 11)
22:#define AA_MASK		(0x1 << 10)
23:#define TC_MASK		(0x1 <<  9)
24:#define RD_MASK		(0x1 <<  8)
25:#define RA_MASK		(0x1 <<  7)
26:#define Z_MASK		(0x1 <<  6)
27:#define AD_MASK		(0x1 <<  5)
28:#define CD_MASK		(0x1 <<  4)
29:#define RCODE_MASK	(0xf)
31:#define OPCODE(v)	((v) & OPCODE_MASK)
32:#define RCODE(v)	((v) & RCODE_MASK)
272:#define AS_DB(p) ((p)->as_ctx->ac_db[(p)->as_db_idx - 1])
273:#define AS_FAMILY(p) ((p)->as_ctx->ac_family[(p)->as_family_idx])
331:#define DPRINT(...)		do { if(_asr_debug) {		\
334:#define DPRINT_PACKET(n, p, s)	do { if(_asr_debug) {		\
342:#define DPRINT(...)
343:#define DPRINT_PACKET(...)
356:#define async_set_state(a, s) do {		\

hash/sha2.c
56:#if defined(__amd64__) || defined(__i386__)
89:#if !defined(BYTE_ORDER) || (BYTE_ORDER != LITTLE_ENDIAN && BYTE_ORDER != BIG_ENDIAN)
96:#define SHA224_SHORT_BLOCK_LENGTH	(SHA224_BLOCK_LENGTH - 8)
97:#define SHA256_SHORT_BLOCK_LENGTH	(SHA256_BLOCK_LENGTH - 8)
98:#define SHA384_SHORT_BLOCK_LENGTH	(SHA384_BLOCK_LENGTH - 16)
99:#define SHA512_SHORT_BLOCK_LENGTH	(SHA512_BLOCK_LENGTH - 16)
102:#define BE_8_TO_32(dst, cp) do {					\
107:#define BE_8_TO_64(dst, cp) do {					\
114:#define BE_64_TO_8(cp, src) do {					\
125:#define BE_32_TO_8(cp, src) do {					\
137:#define ADDINC128(w,n) do {						\
154:#define R(b,x) 		((x) >> (b))
156:#define S32(b,x)	(((x) >> (b)) | ((x) << (32 - (b))))
158:#define S64(b,x)	(((x) >> (b)) | ((x) << (64 - (b))))
161:#define Ch(x,y,z)	(((x) & (y)) ^ ((~(x)) & (z)))
162:#define Maj(x,y,z)	(((x) & (y)) ^ ((x) & (z)) ^ ((y) & (z)))
165:#define Sigma0_256(x)	(S32(2,  (x)) ^ S32(13, (x)) ^ S32(22, (x)))
166:#define Sigma1_256(x)	(S32(6,  (x)) ^ S32(11, (x)) ^ S32(25, (x)))
167:#define sigma0_256(x)	(S32(7,  (x)) ^ S32(18, (x)) ^ R(3 ,   (x)))
168:#define sigma1_256(x)	(S32(17, (x)) ^ S32(19, (x)) ^ R(10,   (x)))
171:#define Sigma0_512(x)	(S64(28, (x)) ^ S64(34, (x)) ^ S64(39, (x)))
172:#define Sigma1_512(x)	(S64(14, (x)) ^ S64(18, (x)) ^ S64(41, (x)))
173:#define sigma0_512(x)	(S64( 1, (x)) ^ S64( 8, (x)) ^ R( 7,   (x)))
174:#define sigma1_512(x)	(S64(19, (x)) ^ S64(61, (x)) ^ R( 6,   (x)))
266:#if !defined(SHA2_SMALL)
338:#endif /* !defined(SHA2_SMALL) */
355:#define ROUND256_0_TO_15(a,b,c,d,e,f,g,h) do {				    \
364:#define ROUND256(a,b,c,d,e,f,g,h) do {					    \
635:#define ROUND512_0_TO_15(a,b,c,d,e,f,g,h) do {				    \
645:#define ROUND512(a,b,c,d,e,f,g,h) do {					    \
900:#if !defined(SHA2_SMALL)
975:#endif /* !defined(SHA2_SMALL) */

asr/getnameinfo.c
33:#define SA_IN(sa) ((struct sockaddr_in*)(sa))
34:#define SA_IN6(sa) ((struct sockaddr_in6*)(sa))

asr/res_send_async.c
36:#define OP_QUERY    (0)
49:#define AS_NS_SA(p) ((p)->as_ctx->ac_ns[(p)->as.dns.nsidx - 1])

asr/getaddrinfo_async.c
61:#define MATCH_FAMILY(a, b) ((a) == matches[(b)].family || (a) == PF_UNSPEC)
62:#define MATCH_PROTO(a, b) ((a) == matches[(b)].protocol || (a) == 0 || matches[(b)].protocol == 0)
64:#define MATCH_SOCKTYPE(a, b) ((a) == matches[(b)].socktype || ((a) == 0 && \

rmd160hl.c
36:#define MINIMUM(a, b)	(((a) < (b)) ? (a) : (b))

thread/rthread_file.c
79:#define file_idx(_p)	((int)((((uintptr_t) _p) >> sizeof(void *)) % NUM_HEADS))

thread/rthread_libc.c
152:#define MALLOC_LOCK_INITIALIZER(n) { \
160:#define MALLOC_LOCK_INITIALIZER(n) { \

thread/rthread_mutex.c
41:#if defined(__i386__) || defined(__amd64__)
42:#define SPIN_WAIT()	asm volatile("pause": : : "memory")
44:#define SPIN_WAIT()	do { } while (0)

stdlib/hcreate.c
61:#define _DIAGASSERT(x)
75:#define	MIN_BUCKETS	(1 << MIN_BUCKETS_LG2)
81:#define	MAX_BUCKETS_LG2	(sizeof (size_t) * 8 - 1 - 5)
82:#define	MAX_BUCKETS	((size_t)1 << MAX_BUCKETS_LG2)

stdlib/recallocarray.c
28:#define MUL_NO_OVERFLOW ((size_t)1 << (sizeof(size_t) * 4))

stdlib/rand.c
45:#if defined(APIWARN)
58:#if defined(APIWARN)

stdlib/heapsort.c
45:#define	SWAP(a, b, count, size, tmp) { \
55:#define COPY(a, b, count, size, tmp1, tmp2) { \
71:#define CREATE(initval, nmemb, par_i, child_i, par, child, size, count, tmp) { \
103:#define SELECT(par_i, child_i, nmemb, par, child, size, k, count, tmp1, tmp2) { \

stdlib/lsearch.3
30:.\"     @(#)lsearch.3	8.1 (Berkeley) 6/4/93

stdlib/getsubopt.3
30:.\"     @(#)getsubopt.3	8.1 (Berkeley) 6/9/93

stdlib/merge.c
57:#define ISIZE sizeof(int)
58:#define PSIZE sizeof(u_char *)
59:#define ICOPY_LIST(src, dst, last)				\
63:#define ICOPY_ELT(src, dst, i)					\
68:#define CCOPY_LIST(src, dst, last)		\
72:#define CCOPY_ELT(src, dst, i)			\
83:#define EVAL(p) (u_char **)						\
225:#define	swap(a, b) {					\
233:#define reverse(bot, top) {				\

stdlib/getopt_long.c
71:#define PRINT_ERROR	((opterr) && (*options != ':'))
78:#define	BADCH		(int)'?'
79:#define	BADARG		((*options == ':') ? (int)':' : (int)'?')
80:#define	INORDER 	(int)1

stdlib/qsort.c
37:#define min(a, b)	(a) < (b) ? a : b
63:#define TYPE_ALIGNED(TYPE, a, es)			\
66:#define swapcode(TYPE, parmi, parmj, n) { 		\
95:#define swap(a, b)	do {				\
114:#define vecswap(a, b, n) 	if ((n) > 0) swapfunc(a, b, n, swaptype)

stdlib/random.c
181:#define LOCK()		_MUTEX_LOCK(&random_mutex)
182:#define UNLOCK()	_MUTEX_UNLOCK(&random_mutex)
416:#if defined(APIWARN)

stdlib/malloc.c
49:#if defined(__mips64__)
50:#define MALLOC_PAGESHIFT	(14U)
52:#define MALLOC_PAGESHIFT	(PAGE_SHIFT)
56:#define MALLOC_MAXSHIFT		(MALLOC_PAGESHIFT - 1)
57:#define MALLOC_PAGESIZE		(1UL << MALLOC_PAGESHIFT)
58:#define MALLOC_MINSIZE		(1UL << MALLOC_MINSHIFT)
59:#define MALLOC_PAGEMASK		(MALLOC_PAGESIZE - 1)
60:#define MASK_POINTER(p)		((void *)(((uintptr_t)(p)) & ~MALLOC_PAGEMASK))
62:#define MALLOC_MAXCHUNK		(1 << MALLOC_MAXSHIFT)
76:#define MALLOC_MOVE_COND(sz)	((sz) - mopts.malloc_guard < 		\
78:#define MALLOC_MOVE(p, sz)  	(((char *)(p)) +			\
83:#define PAGEROUND(x)  (((x) + (MALLOC_PAGEMASK)) & ~MALLOC_PAGEMASK)
93:#define MMAP(sz)	mmap(NULL, (sz), PROT_READ | PROT_WRITE, \
96:#define MMAPA(a,sz)	mmap((a), (sz), PROT_READ | PROT_WRITE, \
99:#define MQUERY(a, sz)	mquery((a), (sz), PROT_READ | PROT_WRITE, \
143:#define STATS_ADD(x,y)	((x) += (y))
144:#define STATS_SUB(x,y)	((x) -= (y))
145:#define STATS_INC(x)	((x)++)
146:#define STATS_ZERO(x)	((x) = 0)
147:#define STATS_SETF(x,y)	((x)->f = (y))
149:#define STATS_ADD(x,y)	/* nothing */
150:#define STATS_SUB(x,y)	/* nothing */
151:#define STATS_INC(x)	/* nothing */
152:#define STATS_ZERO(x)	/* nothing */
153:#define STATS_SETF(x,y)	/* nothing */
157:#define DIR_INFO_RSZ	((sizeof(struct dir_info) + MALLOC_PAGEMASK) & \
165:#define MALLOC_BITS		(NBBY * sizeof(u_short))
217:#define CALLER	__builtin_return_address(0)
225:#define REALSIZE(sz, r)						\
1706:#define MUL_NO_OVERFLOW	(1UL << (sizeof(size_t) * 4))

stdlib/reallocarray.c
27:#define MUL_NO_OVERFLOW	((size_t)1 << (sizeof(size_t) * 4))

stdlib/rand48.h
30:#define	RAND48_SEED_0	(0x330e)
31:#define	RAND48_SEED_1	(0xabcd)
32:#define	RAND48_SEED_2	(0x1234)
33:#define	RAND48_MULT_0	(0xe66d)
34:#define	RAND48_MULT_1	(0xdeec)
35:#define	RAND48_MULT_2	(0x0005)
36:#define	RAND48_ADD	(0x000b)

stdlib/radixsort.c
62:#define	THRESHOLD	20		/* Divert to simplesort(). */
115:#define empty(s)	(s >= sp)
116:#define pop(a, n, i)	a = (--sp)->sa, n = sp->sn, i = sp->si
117:#define push(a, n, i)	sp->sa = a, sp->sn = n, (sp++)->si = i
118:#define swap(a, b, t)	t = a, a = b, b = t

stdlib/getopt_long.3
31:.\"     @(#)getopt.3	8.5 (Berkeley) 4/27/95
