#! /usr/bin/python3
import pandas as pd
import sys
import argparse

parser = argparse.ArgumentParser(description='kernelpledgesfile manpledgesfile')
parser.add_argument('-k','--kpfilename', metavar='Kernel pledges file name', type=str, nargs='?',
                   help='Kernel Pledges File Name')
parser.add_argument('-m','--mpfilename', metavar='Man page pledges file name', type=str, nargs='?',
                   help='Manpage Pledges File Name')
parser.add_argument('-p','--plistfname', metavar='pledge-list', type=str, nargs='?',
                 help='List of pledges sorted by bit value in kern_pledge.c')
parser.add_argument('function', metavar='<function name>', type=str, nargs=1,
                   help='Function to search for')
args = parser.parse_args()

kpfilename = args.kpfilename
mpfilename = args.mpfilename
plistfname = args.plistfname

if not kpfilename:
    kpfilename = 'function-closures/all-closures-stripped-kernel' #TODO Change this
if not mpfilename:
    #mpfilename = 'function-closures/all-closures-stripped'
    mpfilename = 'final-closures'
if not plistfname:
    plistfname = 'pledge-list'

def bitsettoString(bitstring):
    if pd.isna(bitstring):
        return "NaN"
    bitstring = bitstring[::-1]
    with open(plistfname) as plistf:
        plist = plistf.read().splitlines()
    promise_list = list()
    for i,bit in enumerate(bitstring):
        if int(bit) == 1:
            promise_list.append(plist[i])
        # else:
        #     promise_list.append("---")
    return " ".join(promise_list)


with open(kpfilename) as kpfile:
    kpledges = pd.read_csv(kpfile, header=None, names=['function','long','bitstring'])
with open(mpfilename) as mpfile:
    mpledges = pd.read_csv(mpfile, header=None, names=['function','long','bitstring'])

kpledgeset = set()
mpledgeset = set()

krows = kpledges.loc[kpledges['function'] == args.function[0]]
mrows = mpledges.loc[mpledges['function'] == args.function[0]]

# rows = fpledges.loc[fpledges['function'] == 'err']

assert(len(krows) == 1)
assert(len(mrows) == 1)

for row in krows.iterrows():
    print('Function Name:', row[1].get('function'))
    kpledgeset.add(bitsettoString(row[1].get('bitstring').strip()))
    print('Kernel Pledges:', bitsettoString(row[1].get('bitstring').strip()))

for row in mrows.iterrows():
    mpledgeset.add(bitsettoString(row[1].get('bitstring').strip()))
    print('Man Pledges   :', bitsettoString(row[1].get('bitstring').strip()))

print("Pledge Differences(Man Pledges - Kernel Pledges):")
print(mpledgeset - kpledgeset)
