#! /usr/bin/python3
import pandas as pd
import sys
import argparse

parser = argparse.ArgumentParser(description='finalpledgesfile')
parser.add_argument('-k','--kpfilename', metavar='Kernel pledges file name', type=str, nargs='?',
                   help='Kernel Pledges File Name')
parser.add_argument('-p','--plistfname', metavar='pledge-list', type=str, nargs='?',
                 help='List of pledges sorted by bit value in kern_pledge.c')
parser.add_argument('-i','--functionsfile', metavar='infilename', type=str,
                    help="List of functions to generate bitsets for")
args = parser.parse_args()

kpfilename = args.kpfilename
plistfname = args.plistfname
infilename = args.functionsfile

if not kpfilename:
    kpfilename = 'all-closures-stripped-sysctl' #TODO Change this
if not plistfname:
    plistfname = 'pledge-list'

def bitsettoString(bitstring):
    if pd.isna(bitstring):
        return "NaN"
    bitstring = bitstring[::-1]
    with open(plistfname) as plistf:
        plist = plistf.read().splitlines()
    promise_list = list()
    for i,bit in enumerate(bitstring):
        if int(bit) == 1:
            promise_list.append(plist[i])
        # else:
        #     promise_list.append("---")
    return " ".join(promise_list)


with open(kpfilename) as kpfile:
    kpledges = pd.read_csv(kpfile, header=None, names=['function','long','bitstring'])

functionList = []
with open(infilename) as ffile:
    functionList = [line.strip('\n') for line in ffile.readlines()]

for fname in functionList:
    kpledgeset = set()
    krows = kpledges.loc[kpledges['function'] == fname]
   
    if(len(krows) < 1):
        continue
    
    for row in krows.iterrows():
        kpledgeset.add(bitsettoString(row[1].get('bitstring').strip()))
        print('libCHandlers.emplace(\"', fname.strip(),'\", FunctionPledgesBuilder(', row[1].get('long'), ').build());', sep ="")

#  libCHandlers.emplace("exit",FunctionPledgesBuilder(0).build());  //Program can always exit
