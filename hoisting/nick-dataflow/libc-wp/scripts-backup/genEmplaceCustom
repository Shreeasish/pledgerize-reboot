#! /home/shreeasish/anaconda3/envs/gitwork/bin/python
import pandas as pd
import sys
import argparse

class Promises:
    PLEDGE_ALWAYS, \
    PLEDGE_RPATH, \
    PLEDGE_WPATH, \
    PLEDGE_CPATH, \
    PLEDGE_STDIO, \
    PLEDGE_TMPPATH, \
    PLEDGE_DNS, \
    PLEDGE_INET, \
    PLEDGE_FLOCK, \
    PLEDGE_UNIX, \
    PLEDGE_ID, \
    PLEDGE_TAPE, \
    PLEDGE_GETPW, \
    PLEDGE_PROC, \
    PLEDGE_SETTIME, \
    PLEDGE_FATTR, \
    PLEDGE_PROTEXEC, \
    PLEDGE_TTY, \
    PLEDGE_SENDFD, \
    PLEDGE_RECVF, \
    PLEDGE_EXEC, \
    PLEDGE_ROUTE, \
    PLEDGE_MCAST, \
    PLEDGE_VMINFO, \
    PLEDGE_PS, \
    PLEDGE_DISKLABEL, \
    PLEDGE_PF, \
    PLEDGE_AUDIO, \
    PLEDGE_DPATH, \
    PLEDGE_DRM, \
    PLEDGE_VMM, \
    PLEDGE_CHOWN, \
    PLEDGE_CHOWNUID, \
    PLEDGE_BPF, \
    PLEDGE_ERROR, \
    PLEDGE_USERSET, \
    PLEDGE_STATLIE, \
    PLEDGE_YPACTIVE, \
    COUNT = reversed(range(0,39))



promiseNames = [
"PLEDGE_ALWAYS",
"PLEDGE_RPATH",
"PLEDGE_WPATH",
"PLEDGE_CPATH",
"PLEDGE_STDIO",
"PLEDGE_TMPPATH",
"PLEDGE_DNS",
"PLEDGE_INET",
"PLEDGE_FLOCK",
"PLEDGE_UNIX",
"PLEDGE_ID",
"PLEDGE_TAPE",
"PLEDGE_GETPW",
"PLEDGE_PROC",
"PLEDGE_SETTIME",
"PLEDGE_FATTR",
"PLEDGE_PROTEXEC",
"PLEDGE_TTY",
"PLEDGE_SENDFD",
"PLEDGE_RECVFD",
"PLEDGE_EXEC",
"PLEDGE_ROUTE",
"PLEDGE_MCAST",
"PLEDGE_VMINFO",
"PLEDGE_PS",
"PLEDGE_DISKLABEL",
"PLEDGE_PF",
"PLEDGE_AUDIO",
"PLEDGE_DPATH",
"PLEDGE_DRM",
"PLEDGE_VMM",
"PLEDGE_CHOWN",
"PLEDGE_CHOWNUID",
"PLEDGE_BPF",
"PLEDGE_ERROR",
"PLEDGE_USERSET",
"PLEDGE_STATLIE",
"PLEDGE_YPACTIVE",
"COUNT"]

promiseNames.reverse()

tocheck = [Promises.PLEDGE_TMPPATH, Promises.PLEDGE_YPACTIVE, Promises.PLEDGE_UNIX, Promises.PLEDGE_FLOCK,\
           Promises.PLEDGE_INET, Promises.PLEDGE_DNS, \
           Promises.PLEDGE_CPATH, Promises.PLEDGE_WPATH, Promises.PLEDGE_RPATH ]
checkdict = {\
            (Promises.PLEDGE_TMPPATH):".add(std::make_unique<CheckTMPPATH>(",\
            (Promises.PLEDGE_YPACTIVE):".add(std::make_unique<CheckTMPPATH>(",\
            (Promises.PLEDGE_UNIX):".add(std::make_unique<CheckTMPPATH>(",\
            (Promises.PLEDGE_FLOCK):".add(std::make_unique<CheckTMPPATH>(",\
            (Promises.PLEDGE_INET):".add(std::make_unique<CheckTMPPATH>(",\
            (Promises.PLEDGE_DNS):".add(std::make_unique<CheckTMPPATH>(",\
            (Promises.PLEDGE_STDIO):".add(std::make_unique<CheckTMPPATH>(",\
            (Promises.PLEDGE_CPATH):".add(std::make_unique<CheckTMPPATH>(",\
            (Promises.PLEDGE_WPATH):".add(std::make_unique<CheckTMPPATH>(",\
            (Promises.PLEDGE_RPATH):".add(std::make_unique<CheckTMPPATH>(",\
            (Promises.PLEDGE_EXEC):".add(std::make_unique<CheckTMPPATH>(",\
            (Promises.PLEDGE_PROC ):".add(std::make_unique<CheckTMPPATH>("\
            }

parser = argparse.ArgumentParser(description='kernelpledgesfile manpledgesfile')
parser.add_argument('-k','--kpfilename', metavar='Kernel pledges file name', type=str, nargs='?',
                   help='Kernel Pledges File Name')
parser.add_argument('-m','--mpfilename', metavar='Man page pledges file name', type=str, nargs='?',
                   help='Manpage Pledges File Name')
parser.add_argument('-p','--plistfname', metavar='pledge-list', type=str, nargs='?',
                 help='List of pledges sorted by bit value in kern_pledge.c')
parser.add_argument('functionsf', metavar='<function file name>', type=str, nargs=1,
                   help='Functions File to generate code for')
args = parser.parse_args()

kpfilename = args.kpfilename
mpfilename = args.mpfilename
plistfname = args.plistfname
flistfname = args.functionsf

if not kpfilename:
    kpfilename = 'all-closures-stripped-kernel' #TODO Change this
if not mpfilename:
    mpfilename = 'all-closures-stripped'
if not plistfname:
    plistfname = 'pledge-list'

def bitsettoString(bitstring):
    if pd.isna(bitstring):
        return "NaN"
    bitstring = bitstring[::-1]
    with open(plistfname) as plistf:
        plist = plistf.read().splitlines()
    promise_list = list()
    for i,bit in enumerate(bitstring):
        if int(bit) == 1:
            promise_list.append(plist[i])
        # else:
        #     promise_list.append("---")
    return " ".join(promise_list)

# def bitsetCustomize(bitstring):
#     if pd.isna(bitstring):
#         return "NaN"
#     bitstring = bitstring[::-1]
#     with open(plistfname) as plistf:
#         plist = plistf.read().splitlines()
#     promise_list = list()
#     for i,bit in enumerate(bitstring):
#         if int(bit) == 1:
#             promise_list.append(plist[i])
#         if int()
#         # else:
#         #     promise_list.append("---")
#     return " ".join(promise_list)

with open(flistfname[0]) as ffile:
    functions = ffile.read().splitlines() 

with open(kpfilename) as kpfile:
    kpledges = pd.read_csv(kpfile, header=None, names=['function','long','bitstring'], sep=", ", engine="python")
# with open(mpfilename) as mpfile:
#     mpledges = pd.read_csv(mpfile, header=None, names=['function','long','bitstring'])

kpledgeset = set()
# mpledgeset = set()
for func in functions:
    krows = kpledges.loc[ kpledges['function'] == func ]
    # mrows = mpledges.loc[ mpledges['function'] == args.function[0] ]

    # rows = fpledges.loc[fpledges['function'] == 'err']

    if(len(krows) < 1):
        # print("Function \'" + args.function[0] + "\' not found, skipping",file=sys.stderr)
        sys.exit()

    try:
        assert(len(krows) == 1)
        # assert(len(mrows) == 1)
    except AssertionError:
        # print("Function \'" + args.function[0] + "\' AssertionError, skipping",file=sys.stderr)
        sys.exit()


    # libCHandlers.emplace("getopt",FunctionPledgesBuilder(16).build());
    # libCHandlers.emplace("isdigit",FunctionPledgesBuilder(0).build());
    # libCHandlers.emplace("isspace",FunctionPledgesBuilder(0).build());
    # libCHandlers.emplace("localtime",FunctionPledgesBuilder(16).build());

    #  5 -> CheckTMPATH
    #  6 -> CheckTMPATH

    for row in krows.iterrows():
        bitset = row[1].get('bitstring')
        # print(bitset)
        for i,bit in enumerate(bitset):
            if bit == "1":
                print(promiseNames[i])
        long   = row[1].get('long')
        # print(len(bitset))
        # print(type(bitset[Promises.PLEDGE_TMPPATH]))
        customString = ""
        for promise in tocheck:
            if bitset[promise] == "1":
                print(row[1].get('function') + "Requires " + promiseNames[promise] + ", enter arg number\n", file=sys.stderr)
                argno = input()
                if argno is -1:
                    # Cancel
                    continue
                else:
                    customString = customString + checkdict[promise] + str(argno) + "))"
                    long = long - ( 1 << 38 - Promises.PLEDGE_TMPPATH )
        print('libCHandlers.emplace(\"' + row[1].get('function') + "\",FunctionPledgesBuilder(" + str(long) + ")" + customString + ".build());")
        # print(bin(long))
        # kpledgeset.add(bitsettoString(row[1].get('bitstring').strip()))

        # print('Kernel Pledges:', bitsettoString(row[1].get('bitstring').strip()))

    # for row in mrows.iterrows():
    #     mpledgeset.add(bitsettoString(row[1].get('bitstring').strip()))
    #     print('Man Pledges   :', bitsettoString(row[1].get('bitstring').strip()))

    # print("Pledge Differences(Man Pledges - Kernel Pledges):")
    #
    # print(mpledgeset - kpledgeset)
    # bin(30)


#TODO Pledges
# PLEDGE_YPACTIVE
# PLEDGE_UNIX
# PLEDGE_FLOCK
# PLEDGE_INET
# PLEDGE_DNS
# PLEDGE_TMPPATH
# PLEDGE_STDIO
# PLEDGE_CPATH
# PLEDGE_WPATH
# PLEDGE_RPATH
# PLEDGE_EXEC
# PLEDGE_PROC